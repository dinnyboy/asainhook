--[[Credits: IDK sorry.

the following code is not mines, and i don't claim it as mines.]]

local e = game:GetService("UserInputService")
local f = game:GetService("RunService")
local g = game:GetService("TweenService")
local h = game:GetService("Players")
local i = game:GetService("Stats")
local j = Drawing.new("Circle")
j.Color = Color3.fromRGB(255, 255, 255)
j.Thickness = 1
local k = {
    connections = {},
    accents = {},
    drawings = {},
    hidden = {},
    pointers = {},
    flags = {},
    preloaded_images = {},
    loaded = false
}
makefolder("beanbot")
makefolder("beanbot/Da Hood")
makefolder("beanbot/Da Hood/configs")
local l = {}
local m = game:GetObjects("rbxassetid://9474737816")[1]
m.Head.Face:Destroy()
for n, b in pairs(m:GetChildren()) do
    b.Transparency = b.Name == "HumanoidRootPart" and 1 or 0.88
    b.Material = "Neon"
    b.Color = Color3.fromRGB(255, 0, 0)
    b.CanCollide = false
    b.Anchored = false
end
local o = {}
do
    function o:Draw(p, q, r, s)
        s = s or false
        local t = Drawing.new(p)
        local u = {}
        rawset(u, "__OBJECT_EXIST", true)
        setmetatable(
            u,
            {
                __index = function(self, v)
                    if rawget(u, "__OBJECT_EXIST") then
                        return t[v]
                    end
                end,
                __newindex = function(self, v, w)
                    if rawget(u, "__OBJECT_EXIST") then
                        t[v] = w
                        if v == "Position" then
                            for a, b in pairs(rawget(u, "children")) do
                                b.Position = u.Position + b.GetOffset()
                            end
                        end
                    end
                end
            }
        )
        rawset(
            u,
            "Remove",
            function()
                if rawget(u, "__OBJECT_EXIST") then
                    t:Remove()
                    rawset(u, "__OBJECT_EXIST", false)
                end
            end
        )
        rawset(
            u,
            "GetType",
            function()
                return p
            end
        )
        rawset(
            u,
            "GetOffset",
            function()
                return q or Vector2.new()
            end
        )
        rawset(
            u,
            "SetOffset",
            function(x)
                q = x or Vector2.new()
                u.Position = r.Parent.Position + u.GetOffset()
            end
        )
        rawset(u, "children", {})
        rawset(
            u,
            "Lerp",
            function(y, z)
                if not rawget(u, "__OBJECT_EXIST") then
                    return
                end
                local A = 0
                local B = {}
                local C
                for n, b in pairs(y) do
                    B[n] = u[n]
                end
                local function D()
                    for n, b in pairs(y) do
                        u[n] = (b - B[n]) * A / z + B[n]
                    end
                end
                C =
                    f.RenderStepped:Connect(
                    function(E)
                        if A < z then
                            A = A + E
                            D()
                        else
                            C:Disconnect()
                        end
                    end
                )
                table.insert(k.connections, C)
            end
        )
        local F = {
            ["Parent"] = function(G)
                table.insert(rawget(G, "children"), u)
            end
        }
        if p == "Square" then
            u.Thickness = 1
            u.Filled = true
        end
        u.Visible = k.loaded
        if r ~= nil then
            for v, w in pairs(r) do
                if F[v] == nil then
                    u[v] = w
                else
                    F[v](w)
                end
            end
            if r.Parent then
                u.Position = r.Parent.Position + u.GetOffset()
            end
            if r.Parent and r.From then
                u.From = r.Parent.Position + u.GetOffset()
            end
            if r.Parent and r.To then
                u.To = r.Parent.Position + u.GetOffset()
            end
        end
        if not k.loaded and not s then
            u.Transparency = 0
        end
        if not s then
            table.insert(k.drawings, {u, r["Transparency"] or 1})
        else
            table.insert(k.hidden, {u, r["Transparency"] or 1})
        end
        return u
    end
    function o:ScreenSize()
        return workspace.CurrentCamera.ViewportSize
    end
    function o:RoundVector(H)
        return Vector2.new(math.floor(H.X), math.floor(H.Y))
    end
    function o:MouseOverDrawing(G)
        local I = {G.Position, G.Position + G.Size}
        local J = e:GetMouseLocation()
        return J.X >= I[1].X and J.Y >= I[1].Y and J.X <= I[2].X and J.Y <= I[2].Y
    end
    function o:MouseOverPosition(I)
        local J = e:GetMouseLocation()
        return J.X >= I[1].X and J.Y >= I[1].Y and J.X <= I[2].X and J.Y <= I[2].Y
    end
    function o:Image(G, K)
        local L = k.preloaded_images[K] or game:HttpGet(K)
        if k.preloaded_images[K] == nil then
            k.preloaded_images[K] = L
        end
        G.Data = L
    end
    function o:Connect(C, M)
        local N = C:Connect(M)
        table.insert(k.connections, N)
        return N
    end
    function o:Combine(O, P)
        local Q = {}
        for n, b in pairs(O) do
            table.insert(Q, b)
        end
        for n, b in pairs(P) do
            table.insert(Q, b)
        end
        return Q
    end
    function o:GetTextSize(R, S, T)
        local U = Drawing.new("Text")
        U.Size = T
        U.Font = S
        U.Text = R
        local V = U.TextBounds
        U:Remove()
        return V
    end
    function o:RemoveItem(W, X)
        local Y = {}
        for n, b in pairs(W) do
            if b ~= X then
                table.insert(Y, b)
            end
        end
        return Y
    end
    function o:CopyTable(W)
        local Y = {}
        for n, b in pairs(W) do
            Y[n] = b
        end
        return Y
    end
    function o.EspAddPlayer(Z)
        l[Z] = {
            Box = o:Draw("Square", Vector2.new(), {Visible = false, Filled = false, ZIndex = 2}, true),
            BoxOutline = o:Draw(
                "Square",
                Vector2.new(),
                {Visible = false, Filled = false, Thickness = 3, ZIndex = 1},
                true
            ),
            Health = o:Draw("Square", Vector2.new(), {Visible = false, ZIndex = 2}, true),
            HealthOutline = o:Draw("Square", Vector2.new(), {Visible = false, ZIndex = 1}, true),
            Name = o:Draw(
                "Text",
                Vector2.new(),
                {Size = 13, Font = 2, Text = Z.Name, Outline = true, Center = true, Visible = false, ZIndex = 1},
                true
            )
        }
    end
    function o.EspRemovePlayer(Z)
        if l[Z] then
            for n, b in pairs(l[Z]) do
                b.Remove()
            end
            l[Z] = nil
        end
    end
end
for a, Z in pairs(game.Players:GetPlayers()) do
    o.EspAddPlayer(Z)
end
o:Connect(game.Players.PlayerAdded, o.EspAddPlayer)
o:Connect(game.Players.PlayerRemoving, o.EspRemovePlayer)
function k:New(_)
    _ = _ or {}
    local a0 = _.name or _.Name or "bbot ui"
    local a1 = _.accent1 or _.Accent1 or Color3.fromRGB(127, 72, 163)
    local a2 = _.accent2 or _.Accent2 or Color3.fromRGB(87, 32, 123)
    local a3 = {
        name = a0,
        tabs = {},
        visible = false,
        fading = false,
        togglekey = "Insert",
        dragging = false,
        startPos = nil,
        content = {dropdown = nil, colorpicker = nil, keybind = nil}
    }
    local a4 =
        o:Draw(
        "Square",
        nil,
        {
            Color = Color3.fromRGB(35, 35, 35),
            Size = Vector2.new(496, 596),
            Position = o:RoundVector(o:ScreenSize() / 2) - Vector2.new(248, 298)
        }
    )
    o:Draw(
        "Square",
        Vector2.new(-1, -1),
        {Color = Color3.fromRGB(20, 20, 20), Size = a4.Size + Vector2.new(2, 2), Filled = false, Parent = a4}
    )
    o:Draw(
        "Square",
        Vector2.new(-2, -2),
        {Color = Color3.fromRGB(0, 0, 0), Size = a4.Size + Vector2.new(4, 4), Filled = false, Parent = a4}
    )
    table.insert(
        k.accents,
        o:Draw("Square", Vector2.new(0, 1), {Color = a1, Size = Vector2.new(a4.Size.X, 1), Parent = a4})
    )
    table.insert(
        k.accents,
        o:Draw("Square", Vector2.new(0, 2), {Color = a2, Size = Vector2.new(a4.Size.X, 1), Parent = a4})
    )
    o:Draw(
        "Square",
        Vector2.new(0, 3),
        {Color = Color3.fromRGB(20, 20, 20), Size = Vector2.new(a4.Size.X, 1), Parent = a4}
    )
    local a5 =
        o:Draw(
        "Text",
        Vector2.new(4, 6),
        {Color = Color3.fromRGB(255, 255, 255), Outline = true, Size = 13, Font = 2, Text = a0, Parent = a4}
    )
    local a6 =
        o:Draw(
        "Square",
        Vector2.new(8, 23),
        {Color = Color3.fromRGB(35, 35, 35), Size = Vector2.new(480, 566), Parent = a4}
    )
    o:Draw(
        "Square",
        Vector2.new(-1, -1),
        {Color = Color3.fromRGB(20, 20, 20), Size = a6.Size + Vector2.new(2, 2), Filled = false, Parent = a6}
    )
    o:Draw(
        "Square",
        Vector2.new(-2, -2),
        {Color = Color3.fromRGB(0, 0, 0), Size = a6.Size + Vector2.new(4, 4), Filled = false, Parent = a6}
    )
    table.insert(
        k.accents,
        o:Draw("Square", Vector2.new(0, 1), {Color = a1, Size = Vector2.new(a6.Size.X, 1), Parent = a6})
    )
    table.insert(
        k.accents,
        o:Draw("Square", Vector2.new(0, 2), {Color = a2, Size = Vector2.new(a6.Size.X, 1), Parent = a6})
    )
    o:Draw(
        "Square",
        Vector2.new(0, 3),
        {Color = Color3.fromRGB(20, 20, 20), Size = Vector2.new(a6.Size.X, 1), Parent = a6}
    )
    local a7 =
        o:Draw(
        "Square",
        Vector2.new(1, 37),
        {Color = Color3.fromRGB(35, 35, 35), Size = Vector2.new(478, 528), Parent = a6}
    )
    o:Draw(
        "Square",
        Vector2.new(-1, -1),
        {Color = Color3.fromRGB(20, 20, 20), Size = a7.Size + Vector2.new(2, 2), Filled = false, Parent = a7}
    )
    o:Connect(
        e.InputBegan,
        function(a8)
            if
                a8.UserInputType == Enum.UserInputType.MouseButton1 and
                    o:MouseOverPosition({a4.Position, a4.Position + Vector2.new(a4.Size.X, 22)}) and
                    a4.Visible and
                    not a3.fading
             then
                a3.dragging = true
                a3.startPos = e:GetMouseLocation() - a4.Position
            elseif a8.UserInputType == Enum.UserInputType.Keyboard then
                if a8.KeyCode.Name == a3.togglekey then
                    a3:Toggle()
                end
            end
        end
    )
    o:Connect(
        e.InputEnded,
        function(a8)
            if a8.UserInputType == Enum.UserInputType.MouseButton1 then
                a3.dragging = false
            end
        end
    )
    o:Connect(
        f.RenderStepped,
        function()
            if a3.dragging then
                a4.Position = e:GetMouseLocation() - a3.startPos
            end
        end
    )
    function a3:Toggle()
        if a3.fading then
            return
        end
        a3:CloseContent()
        if a4.Visible then
            for n, b in pairs(k.drawings) do
                b[1].Lerp({Transparency = 0}, 0.25)
                delay(
                    0.25,
                    function()
                        b[1].Visible = false
                    end
                )
            end
            a3.fading = true
            delay(
                0.25,
                function()
                    a3.fading = false
                end
            )
        else
            local a9 = tick()
            for n, b in pairs(k.drawings) do
                b[1].Visible = true
                b[1].Lerp({Transparency = b[2]}, 0.25)
            end
            local C
            C =
                o:Connect(
                f.RenderStepped,
                function()
                    if tick() - a9 < 1 / 4 then
                        a3:UpdateTabs()
                    else
                        C:Disconnect()
                    end
                end
            )
            a3.fading = true
            delay(
                0.25,
                function()
                    a3.fading = false
                    a3:UpdateTabs()
                end
            )
        end
        a3.visible = not a3.visible
    end
    function a3:Tab(_)
        _ = _ or {}
        local a0 = _.name or _.Name or "Tab"
        local aa = {name = a0, sections = {}, sectionOffsets = {left = 0, right = 0}, open = false, instances = {}}
        if #a3.tabs >= 5 then
            return
        end
        local ab =
            o:Draw(
            "Square",
            Vector2.new(1 + 96 * #a3.tabs, 5),
            {Color = Color3.fromRGB(30, 30, 30), Size = Vector2.new(94, 30), Parent = a6}
        )
        local ac =
            o:Draw(
            "Square",
            Vector2.new(-1, -1),
            {Color = Color3.fromRGB(20, 20, 20), Size = ab.Size + Vector2.new(2, 2), Filled = false, Parent = ab}
        )
        local ad = o:Draw("Image", Vector2.new(), {Size = ab.Size, Visible = false, Transparency = 0.65, Parent = ab})
        local ae =
            o:Draw(
            "Text",
            Vector2.new(47, 7),
            {
                Color = Color3.fromRGB(255, 255, 255),
                Outline = true,
                Size = 13,
                Font = 2,
                Text = a0,
                Center = true,
                Parent = ab
            }
        )
        local af =
            o:Draw(
            "Square",
            Vector2.new(0, 30),
            {Color = Color3.fromRGB(35, 35, 35), Size = Vector2.new(ab.Size.X, 2), Visible = false, Parent = ab}
        )
        o:Image(ad, "https://i.imgur.com/5hmlrjX.png")
        o:Connect(
            e.InputBegan,
            function(a8)
                if a8.UserInputType == Enum.UserInputType.MouseButton1 and o:MouseOverDrawing(ab) and not a3.fading then
                    a3:SetTab(a0)
                end
            end
        )
        aa.instances = {ab, ac, ad, ae, af}
        table.insert(a3.tabs, aa)
        function aa:Show()
            a3:CloseContent()
            ab.Color = Color3.fromRGB(50, 50, 50)
            ad.Visible = true
            af.Visible = true
            for n, b in pairs(aa.sections) do
                for ag, ah in pairs(b.instances) do
                    ah.Visible = true
                end
            end
        end
        function aa:Hide()
            a3:CloseContent()
            ab.Color = Color3.fromRGB(30, 30, 30)
            ad.Visible = false
            af.Visible = false
            for n, b in pairs(aa.sections) do
                for ag, ah in pairs(b.instances) do
                    ah.Visible = false
                end
            end
        end
        function aa:GetSecionPosition(ai)
            local aj = Vector2.new(ai == "left" and 9 or ai == "right" and 245, 9 + aa.sectionOffsets[ai])
            return aj
        end
        function aa:Section(_)
            _ = _ or {}
            local a0 = _.name or _.Name or "section"
            local ai = (_.side or _.Side or "left"):lower()
            local ak = {name = a0, side = ai, offset = 0, instances = {}}
            local al =
                o:Draw(
                "Square",
                aa:GetSecionPosition(ai),
                {Color = Color3.fromRGB(35, 35, 35), Size = Vector2.new(226, 15), Parent = a7}
            )
            local am =
                o:Draw(
                "Square",
                Vector2.new(-1, -1),
                {Color = Color3.fromRGB(20, 20, 20), Size = al.Size + Vector2.new(2, 2), Filled = false, Parent = al}
            )
            local an =
                o:Draw(
                "Square",
                Vector2.new(-2, -2),
                {Color = Color3.fromRGB(0, 0, 0), Size = al.Size + Vector2.new(4, 4), Filled = false, Parent = al}
            )
            local ao =
                o:Draw(
                "Text",
                Vector2.new(4, 4),
                {Color = Color3.fromRGB(255, 255, 255), Outline = true, Size = 13, Font = 2, Text = a0, Parent = al}
            )
            local ap = o:Draw("Square", Vector2.new(0, 1), {Color = a1, Size = Vector2.new(al.Size.X, 1), Parent = al})
            table.insert(k.accents, ap)
            local aq = o:Draw("Square", Vector2.new(0, 2), {Color = a2, Size = Vector2.new(al.Size.X, 1), Parent = al})
            table.insert(k.accents, aq)
            local ar =
                o:Draw(
                "Square",
                Vector2.new(0, 3),
                {Color = Color3.fromRGB(20, 20, 20), Size = Vector2.new(al.Size.X, 1), Parent = al}
            )
            aa.sectionOffsets[ai] = aa.sectionOffsets[ai] + 27
            ak.instances = {al, am, an, ao, ap, aq, ar}
            table.insert(aa.sections, ak)
            function ak:Update()
                task.wait()
                al.Size = Vector2.new(226, 28 + ak.offset)
                am.Size = al.Size + Vector2.new(2, 2)
                an.Size = al.Size + Vector2.new(4, 4)
            end
            function ak:Toggle(_)
                _ = _ or {}
                local a0 = _.name or _.Name or "toggle"
                local aj = _.default or _.Default or _.def or _.Def or false
                local as = _.callback or _.Callback or function()
                    end
                local at = _.flag or _.Flag or ""
                local au = _.pointer or _.Pointer or aa.name .. "_" .. ak.name .. "_" .. a0
                local av = {name = a0, state = false, colorpicker = {}, keybind = {}}
                local aw =
                    o:Draw(
                    "Square",
                    Vector2.new(8, 25 + ak.offset),
                    {Color = Color3.fromRGB(50, 50, 50), Size = Vector2.new(8, 8), Parent = al}
                )
                table.insert(k.accents, aw)
                local ax =
                    o:Draw(
                    "Square",
                    Vector2.new(-1, -1),
                    {Color = Color3.fromRGB(0, 0, 0), Size = aw.Size + Vector2.new(2, 2), Filled = false, Parent = aw}
                )
                local ay =
                    o:Draw(
                    "Square",
                    Vector2.new(-2, -2),
                    {
                        Color = Color3.fromRGB(30, 30, 30),
                        Size = aw.Size + Vector2.new(4, 4),
                        Filled = false,
                        Parent = aw
                    }
                )
                local az = o:Draw("Image", Vector2.new(), {Size = aw.Size, Transparency = 0.8, Parent = aw})
                local aA =
                    o:Draw(
                    "Text",
                    Vector2.new(15, -3),
                    {Color = Color3.fromRGB(255, 255, 255), Outline = true, Size = 13, Font = 2, Text = a0, Parent = aw}
                )
                o:Image(az, "https://i.imgur.com/5hmlrjX.png")
                function av:Set(w)
                    av.state = w
                    aw.Color = av.state == true and a1 or Color3.fromRGB(50, 50, 50)
                    if at ~= "" then
                        k.flags[at] = av.state
                    end
                    as(av.state)
                end
                function av:Get()
                    return av.state
                end
                function av:Keybind(_)
                    if #av.colorpicker > 0 then
                        return
                    end
                    _ = _ or {}
                    local aB = _.name or _.Name or _.kname or _.Kname or av.name
                    local aj = (_.default or _.Default or _.def or _.Def or "..."):upper()
                    local aC = _.pointer or _.Pointer or aa.name .. "_" .. ak.name .. "_" .. av.name .. "_keybind"
                    local as = _.callback or _.Callback or function()
                        end
                    local aD = {name = aB, value = aj, binding = false, mode = "Toggle", content = {}}
                    local aE =
                        o:Draw(
                        "Square",
                        Vector2.new(171, -1),
                        {Color = Color3.fromRGB(25, 25, 25), Size = Vector2.new(40, 12), Parent = aw}
                    )
                    local aF =
                        o:Draw(
                        "Square",
                        Vector2.new(-1, -1),
                        {
                            Color = Color3.fromRGB(0, 0, 0),
                            Size = aE.Size + Vector2.new(2, 2),
                            Filled = false,
                            Parent = aE
                        }
                    )
                    local aG =
                        o:Draw(
                        "Square",
                        Vector2.new(-2, -2),
                        {
                            Color = Color3.fromRGB(30, 30, 30),
                            Size = aE.Size + Vector2.new(4, 4),
                            Filled = false,
                            Parent = aE
                        }
                    )
                    local aH =
                        o:Draw(
                        "Text",
                        Vector2.new(21, -1),
                        {
                            Color = Color3.fromRGB(255, 255, 255),
                            Outline = true,
                            Size = 13,
                            Font = 2,
                            Text = aj,
                            Center = true,
                            Parent = aE
                        }
                    )
                    local aI = {
                        ["Insert"] = "INS",
                        ["Home"] = "HOME",
                        ["LeftAlt"] = "LALT",
                        ["LeftControl"] = "LC",
                        ["LeftShift"] = "LS",
                        ["RightAlt"] = "RALT",
                        ["RightControl"] = "RC",
                        ["RightShift"] = "RS",
                        ["CapsLock"] = "CAPS",
                        ["Delete"] = "DEL",
                        ["PageUp"] = "PUP",
                        ["PageDown"] = "PDO",
                        ["Space"] = "SPACE"
                    }
                    function aD:Set(w)
                        aD.value = w
                        aH.Text = aD.value
                        as(aD.value)
                    end
                    function aD:Get()
                        return aD.value
                    end
                    o:Connect(
                        e.InputBegan,
                        function(a8)
                            if not aD.binding then
                                if a8.UserInputType == Enum.UserInputType.MouseButton1 then
                                    if not a3:MouseOverContent() and not a3.fading and aa.open then
                                        if #aD.content > 0 then
                                            a3:CloseContent()
                                            aD.content = {}
                                        end
                                        if o:MouseOverDrawing(aE) then
                                            aD.binding = true
                                            aH.Text = "..."
                                        end
                                    elseif #aD.content > 0 and a3:MouseOverContent() and not a3.fading and aa.open then
                                        for n, b in pairs({"Always", "Hold", "Toggle"}) do
                                            if
                                                o:MouseOverPosition(
                                                    {
                                                        aD.content[1].Position + Vector2.new(0, 15 * (n - 1)),
                                                        aD.content[1].Position +
                                                            Vector2.new(aD.content[1].Size.X, 15 * n)
                                                    }
                                                )
                                             then
                                                aD.mode = b
                                                aD.content[4 + n].Color = a1
                                            else
                                                aD.content[4 + n].Color = Color3.fromRGB(255, 255, 255)
                                            end
                                        end
                                    end
                                elseif a8.UserInputType == Enum.UserInputType.Keyboard and a8.KeyCode.Name == aD.value then
                                    if #aD.content > 0 then
                                        a3:CloseContent()
                                        aD.content = {}
                                    end
                                    if aD.mode == "Toggle" then
                                        av:Set(not av.state)
                                    else
                                        av:Set(true)
                                    end
                                    if k.loaded then
                                        if av.state then
                                            a3.keybinds:Add(
                                                string.format(
                                                    "[%s] " .. ak.name .. ": " .. aD.name,
                                                    aI[aD.value] or aD.value:upper()
                                                )
                                            )
                                        else
                                            a3.keybinds:Remove(
                                                string.format(
                                                    "[%s] " .. ak.name .. ": " .. aD.name,
                                                    aI[aD.value] or aD.value:upper()
                                                )
                                            )
                                        end
                                    end
                                elseif a8.UserInputType == Enum.UserInputType.MouseButton2 then
                                    if
                                        o:MouseOverDrawing(aE) and not a3:MouseOverContent() and not a3.fading and
                                            aa.open
                                     then
                                        local aJ =
                                            o:Draw(
                                            "Square",
                                            Vector2.new(45, -17),
                                            {
                                                Color = Color3.fromRGB(50, 50, 50),
                                                Size = Vector2.new(68, 45),
                                                Parent = aE
                                            }
                                        )
                                        local aK =
                                            o:Draw(
                                            "Square",
                                            Vector2.new(-1, -1),
                                            {
                                                Color = Color3.fromRGB(20, 20, 20),
                                                Size = aJ.Size + Vector2.new(2, 2),
                                                Filled = false,
                                                Parent = aJ
                                            }
                                        )
                                        local aL =
                                            o:Draw(
                                            "Square",
                                            Vector2.new(-2, -2),
                                            {
                                                Color = Color3.fromRGB(0, 0, 0),
                                                Size = aJ.Size + Vector2.new(4, 4),
                                                Filled = false,
                                                Parent = aJ
                                            }
                                        )
                                        local aM =
                                            o:Draw(
                                            "Image",
                                            Vector2.new(),
                                            {Size = aJ.Size, Transparency = 0.65, Parent = aJ}
                                        )
                                        o:Image(aM, "https://i.imgur.com/5hmlrjX.png")
                                        aD.content = {aJ, aK, aL, aM}
                                        for n, b in pairs({"Always", "Hold", "Toggle"}) do
                                            local aN =
                                                o:Draw(
                                                "Text",
                                                Vector2.new(34, 15 * (n - 1)),
                                                {
                                                    Color = aD.mode == b and a1 or Color3.fromRGB(255, 255, 255),
                                                    Outline = true,
                                                    Size = 13,
                                                    Font = 2,
                                                    Text = b,
                                                    Center = true,
                                                    Parent = aJ
                                                }
                                            )
                                            table.insert(aD.content, aN)
                                        end
                                        a3.content.keybind = aD.content
                                    end
                                end
                            else
                                if a8.UserInputType == Enum.UserInputType.Keyboard then
                                    if a8.KeyCode.Name ~= "Escape" and a8.KeyCode.Name ~= "Backspace" then
                                        aD.binding = false
                                        aD.value = a8.KeyCode.Name
                                        aH.Text = aI[aD.value] or aD.value:upper()
                                    else
                                        aD.binding = false
                                        aH.Text = aI[aD.value] or aD.value:upper()
                                    end
                                end
                            end
                        end
                    )
                    o:Connect(
                        e.InputEnded,
                        function(a8)
                            if
                                not aD.binding and a8.UserInputType == Enum.UserInputType.Keyboard and aD.mode == "Hold" and
                                    a8.KeyCode.Name == aD.value
                             then
                                av:Set(false)
                                if k.loaded then
                                    a3.keybinds:Remove(
                                        string.format(
                                            "[%s] " .. ak.name .. ": " .. aD.name,
                                            aI[aD.value] or aD.value:upper()
                                        )
                                    )
                                end
                            end
                        end
                    )
                    av.keybind = aD
                    k.pointers[au] = aD
                    ak.instances = o:Combine(ak.instances, {aE, aF, aG, aH})
                end
                function av:Colorpicker(_)
                    if #av.keybind > 0 then
                        return
                    end
                    _ = _ or {}
                    local aO = _.name or _.Name or "colorpicker"
                    local aj = _.default or _.Default or _.def or _.Def or Color3.fromRGB(255, 0, 0)
                    local at = _.flag or _.Flag or ""
                    local au = _.pointer or _.Pointer or aa.name .. "_" .. ak.name .. "_" .. av.name .. "_colorpicker"
                    local as = _.callback or _.Callback or function()
                        end
                    local aP = {
                        name = aO,
                        value = {aj:ToHSV()},
                        tempvalue = {},
                        brightness = {100, 0},
                        holding = {hue = false, brightness = false, color = false},
                        content = {}
                    }
                    if at ~= "" then
                        k.flags[at] = aj
                    end
                    local aQ =
                        o:Draw(
                        "Square",
                        Vector2.new(al.Size.X - 45, -1),
                        {Color = aj, Size = Vector2.new(24, 10), Parent = aw}
                    )
                    local aR =
                        o:Draw(
                        "Square",
                        Vector2.new(),
                        {
                            Color = Color3.fromRGB(0, 0, 0),
                            Size = aQ.Size,
                            Transparency = 0.3,
                            Filled = false,
                            Parent = aQ
                        }
                    )
                    local aS =
                        o:Draw(
                        "Square",
                        Vector2.new(1, 1),
                        {
                            Color = Color3.fromRGB(0, 0, 0),
                            Size = aQ.Size - Vector2.new(2, 2),
                            Transparency = 0.3,
                            Filled = false,
                            Parent = aQ
                        }
                    )
                    local aT =
                        o:Draw(
                        "Square",
                        Vector2.new(-1, -1),
                        {
                            Color = Color3.fromRGB(0, 0, 0),
                            Size = aQ.Size + Vector2.new(2, 2),
                            Filled = false,
                            Parent = aQ
                        }
                    )
                    function aP:Set(w)
                        if typeof(w) == "Color3" then
                            w = {w:ToHSV()}
                        end
                        aP.value = w
                        aQ.Color = Color3.fromHSV(unpack(aP.value))
                        if at ~= "" then
                            k.flags[at] = Color3.fromHSV(unpack(aP.value))
                        end
                        as(Color3.fromHSV(unpack(aP.value)))
                    end
                    function aP:Get()
                        return Color3.fromHSV(unpack(aP.value))
                    end
                    o:Connect(
                        e.InputBegan,
                        function(a8)
                            if a8.UserInputType == Enum.UserInputType.MouseButton1 then
                                if
                                    #aP.content == 0 and o:MouseOverDrawing(aQ) and not a3:MouseOverContent() and
                                        not a3.fading and
                                        aa.open
                                 then
                                    aP.tempvalue = aP.value
                                    aP.brightness[2] = 0
                                    local aU =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(12, 5),
                                        {Color = Color3.fromRGB(35, 35, 35), Size = Vector2.new(276, 207), Parent = aQ}
                                    )
                                    local aV =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-1, -1),
                                        {
                                            Color = Color3.fromRGB(20, 20, 20),
                                            Size = aU.Size + Vector2.new(2, 2),
                                            Filled = false,
                                            Parent = aU
                                        }
                                    )
                                    local aW =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-2, -2),
                                        {
                                            Color = Color3.fromRGB(0, 0, 0),
                                            Size = aU.Size + Vector2.new(4, 4),
                                            Filled = false,
                                            Parent = aU
                                        }
                                    )
                                    local aX =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(0, 1),
                                        {Color = a1, Size = Vector2.new(aU.Size.X, 1), Parent = aU}
                                    )
                                    table.insert(k.accents, aX)
                                    local aY =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(0, 2),
                                        {Color = a2, Size = Vector2.new(aU.Size.X, 1), Parent = aU}
                                    )
                                    table.insert(k.accents, aY)
                                    local aZ =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(0, 3),
                                        {
                                            Color = Color3.fromRGB(20, 20, 20),
                                            Size = Vector2.new(aU.Size.X, 1),
                                            Parent = aU
                                        }
                                    )
                                    local a_ =
                                        o:Draw(
                                        "Text",
                                        Vector2.new(5, 6),
                                        {
                                            Color = Color3.fromRGB(255, 255, 255),
                                            Outline = true,
                                            Size = 13,
                                            Font = 2,
                                            Text = aP.name,
                                            Parent = aU
                                        }
                                    )
                                    local b0 =
                                        o:Draw(
                                        "Text",
                                        Vector2.new(232, 187),
                                        {
                                            Color = Color3.fromRGB(255, 255, 255),
                                            Outline = true,
                                            Size = 13,
                                            Font = 2,
                                            Text = "[ Apply ]",
                                            Center = true,
                                            Parent = aU
                                        }
                                    )
                                    local b1 =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(10, 23),
                                        {
                                            Color = Color3.fromHSV(aP.value[1], 1, 1),
                                            Size = Vector2.new(156, 156),
                                            Parent = aU
                                        }
                                    )
                                    local b2 = o:Draw("Image", Vector2.new(), {Size = b1.Size, Parent = b1})
                                    local b3 =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-1, -1),
                                        {
                                            Color = Color3.fromRGB(0, 0, 0),
                                            Size = b1.Size + Vector2.new(2, 2),
                                            Filled = false,
                                            Parent = b1
                                        }
                                    )
                                    local b4 =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-2, -2),
                                        {
                                            Color = Color3.fromRGB(30, 30, 30),
                                            Size = b1.Size + Vector2.new(4, 4),
                                            Filled = false,
                                            Parent = b1
                                        }
                                    )
                                    local b5 =
                                        o:Draw(
                                        "Image",
                                        Vector2.new(10, 189),
                                        {Size = Vector2.new(156, 10), Parent = aU}
                                    )
                                    local b6 =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-1, -1),
                                        {
                                            Color = Color3.fromRGB(0, 0, 0),
                                            Size = b5.Size + Vector2.new(2, 2),
                                            Filled = false,
                                            Parent = b5
                                        }
                                    )
                                    local b7 =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-2, -2),
                                        {
                                            Color = Color3.fromRGB(30, 30, 30),
                                            Size = b5.Size + Vector2.new(4, 4),
                                            Filled = false,
                                            Parent = b5
                                        }
                                    )
                                    local b8 =
                                        o:Draw(
                                        "Image",
                                        Vector2.new(176, 23),
                                        {Size = Vector2.new(10, 156), Parent = aU}
                                    )
                                    local b9 =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-1, -1),
                                        {
                                            Color = Color3.fromRGB(0, 0, 0),
                                            Size = b8.Size + Vector2.new(2, 2),
                                            Filled = false,
                                            Parent = b8
                                        }
                                    )
                                    local ba =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-2, -2),
                                        {
                                            Color = Color3.fromRGB(30, 30, 30),
                                            Size = b8.Size + Vector2.new(4, 4),
                                            Filled = false,
                                            Parent = b8
                                        }
                                    )
                                    local bb =
                                        o:Draw(
                                        "Text",
                                        Vector2.new(196, 23),
                                        {
                                            Color = Color3.fromRGB(255, 255, 255),
                                            Outline = true,
                                            Size = 13,
                                            Font = 2,
                                            Text = "New color",
                                            Parent = aU
                                        }
                                    )
                                    local bc =
                                        o:Draw("Image", Vector2.new(197, 37), {Size = Vector2.new(71, 36), Parent = aU})
                                    local bd =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-1, -1),
                                        {
                                            Color = Color3.fromRGB(0, 0, 0),
                                            Size = bc.Size + Vector2.new(2, 2),
                                            Filled = false,
                                            Parent = bc
                                        }
                                    )
                                    local be =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-2, -2),
                                        {
                                            Color = Color3.fromRGB(30, 30, 30),
                                            Size = bc.Size + Vector2.new(4, 4),
                                            Filled = false,
                                            Parent = bc
                                        }
                                    )
                                    local bf =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(2, 2),
                                        {
                                            Color = Color3.fromHSV(unpack(aP.value)),
                                            Size = bc.Size - Vector2.new(4, 4),
                                            Transparency = 0.4,
                                            Parent = bc
                                        }
                                    )
                                    local bg =
                                        o:Draw(
                                        "Text",
                                        Vector2.new(196, 76),
                                        {
                                            Color = Color3.fromRGB(255, 255, 255),
                                            Outline = true,
                                            Size = 13,
                                            Font = 2,
                                            Text = "Old color",
                                            Parent = aU
                                        }
                                    )
                                    local bh =
                                        o:Draw("Image", Vector2.new(197, 91), {Size = Vector2.new(71, 36), Parent = aU})
                                    local bi =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-1, -1),
                                        {
                                            Color = Color3.fromRGB(0, 0, 0),
                                            Size = bh.Size + Vector2.new(2, 2),
                                            Filled = false,
                                            Parent = bh
                                        }
                                    )
                                    local bj =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-2, -2),
                                        {
                                            Color = Color3.fromRGB(30, 30, 30),
                                            Size = bh.Size + Vector2.new(4, 4),
                                            Filled = false,
                                            Parent = bh
                                        }
                                    )
                                    local bk =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(2, 2),
                                        {
                                            Color = Color3.fromHSV(unpack(aP.value)),
                                            Size = bh.Size - Vector2.new(4, 4),
                                            Transparency = 0.4,
                                            Parent = bh
                                        }
                                    )
                                    local bl =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(b2.Size.X - 5, 0),
                                        {
                                            Color = Color3.fromRGB(255, 255, 255),
                                            Size = Vector2.new(5, 5),
                                            Filled = false,
                                            Parent = b2
                                        }
                                    )
                                    local bm =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-1, -1),
                                        {
                                            Color = Color3.fromRGB(0, 0, 0),
                                            Size = bl.Size + Vector2.new(2, 2),
                                            Filled = false,
                                            Parent = bl
                                        }
                                    )
                                    local bn =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-1, 0),
                                        {
                                            Color = Color3.fromRGB(255, 255, 255),
                                            Size = Vector2.new(12, 3),
                                            Filled = false,
                                            Parent = b8
                                        }
                                    )
                                    bn.Position =
                                        Vector2.new(b8.Position.X - 1, b8.Position.Y + aP.tempvalue[1] * b8.Size.Y)
                                    local bo =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-1, -1),
                                        {
                                            Color = Color3.fromRGB(0, 0, 0),
                                            Size = bn.Size + Vector2.new(2, 2),
                                            Filled = false,
                                            Parent = bn
                                        }
                                    )
                                    local bp =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(b5.Size.X, -1),
                                        {
                                            Color = Color3.fromRGB(255, 255, 255),
                                            Size = Vector2.new(3, 12),
                                            Filled = false,
                                            Parent = b5
                                        }
                                    )
                                    bp.Position =
                                        Vector2.new(
                                        b5.Position.X + b5.Size.X * aP.brightness[1] / 100,
                                        b5.Position.Y - 1
                                    )
                                    local bq =
                                        o:Draw(
                                        "Square",
                                        Vector2.new(-1, -1),
                                        {
                                            Color = Color3.fromRGB(0, 0, 0),
                                            Size = bp.Size + Vector2.new(2, 2),
                                            Filled = false,
                                            Parent = bp
                                        }
                                    )
                                    o:Image(b2, "https://i.imgur.com/wpDRqVH.png")
                                    o:Image(
                                        b5,
                                        "https://tr.rbxcdn.com/cf80cdea88fd9bbdb4037ab352260726/420/420/Image/Png"
                                    )
                                    o:Image(b8, "https://i.imgur.com/iEOsHFv.png")
                                    o:Image(
                                        bc,
                                        "https://images-ext-1.discordapp.net/external/Nc7u8ZAc9yYabSDkX2zn48MdXjh0BL3KswXDknMm97w/https/media.discordapp.net/attachments/942749250897477662/980791504954093588/unknown.png"
                                    )
                                    o:Image(
                                        bh,
                                        "https://images-ext-1.discordapp.net/external/Nc7u8ZAc9yYabSDkX2zn48MdXjh0BL3KswXDknMm97w/https/media.discordapp.net/attachments/942749250897477662/980791504954093588/unknown.png"
                                    )
                                    aP.content = {
                                        aU,
                                        aV,
                                        aW,
                                        aX,
                                        aY,
                                        aZ,
                                        a_,
                                        b0,
                                        b1,
                                        b2,
                                        b3,
                                        b4,
                                        b5,
                                        b6,
                                        b7,
                                        b8,
                                        b9,
                                        ba,
                                        bb,
                                        bc,
                                        bd,
                                        be,
                                        bf,
                                        bg,
                                        bh,
                                        bi,
                                        bj,
                                        bk,
                                        bo,
                                        bq,
                                        bm,
                                        bl,
                                        bn,
                                        bp
                                    }
                                    a3.content.colorpicker = aP.content
                                elseif #aP.content > 0 and not a3:MouseOverContent() and not a3.fading and aa.open then
                                    a3:CloseContent()
                                    aP.content = {}
                                    for n, b in pairs(aP.holding) do
                                        aP.holding[n] = false
                                    end
                                elseif #aP.content > 0 and a3:MouseOverContent() and not a3.fadign and aa.open then
                                    if o:MouseOverDrawing(aP.content[10]) then
                                        local br =
                                            math.clamp(
                                            e:GetMouseLocation().X - aP.content[10].Position.X,
                                            0,
                                            aP.content[10].Position.X
                                        ) / aP.content[10].Size.X
                                        local bs =
                                            math.clamp(
                                            e:GetMouseLocation().Y - aP.content[10].Position.Y,
                                            0,
                                            aP.content[10].Position.Y
                                        ) / aP.content[10].Size.Y
                                        local bt = br
                                        local b = aP.brightness[1] / 100 - bs
                                        aP.brightness[2] = bs
                                        aP.tempvalue = {aP.tempvalue[1], bt, b}
                                        local bu = Vector2.new(aP.content[10].Position.X, aP.content[10].Position.Y)
                                        local bv =
                                            Vector2.new(
                                            aP.content[10].Position.X + aP.content[10].Size.X - 5,
                                            aP.content[10].Position.Y + aP.content[10].Size.Y - 5
                                        )
                                        local bw = e:GetMouseLocation()
                                        if bw.X > bv.X then
                                            bw = Vector2.new(bv.X, bw.Y)
                                        end
                                        if bw.Y > bv.Y then
                                            bw = Vector2.new(bw.X, bv.Y)
                                        end
                                        if bw.X < bu.X then
                                            bw = Vector2.new(bu.X, bw.Y)
                                        end
                                        if bw.Y < bu.Y then
                                            bw = Vector2.new(bw.X, bu.Y)
                                        end
                                        aP.content[32].Position = bw
                                        aP.holding.color = true
                                    elseif o:MouseOverDrawing(aP.content[16]) then
                                        local bx =
                                            math.clamp(
                                            e:GetMouseLocation().Y - aP.content[16].Position.Y,
                                            0,
                                            aP.content[16].Size.Y
                                        ) / aP.content[16].Size.Y
                                        aP.tempvalue = {bx, aP.tempvalue[2], aP.tempvalue[3]}
                                        aP.content[33].Position =
                                            Vector2.new(
                                            aP.content[16].Position.X - 1,
                                            aP.content[16].Position.Y + aP.tempvalue[1] * aP.content[16].Size.Y
                                        )
                                        aP.content[9].Color = Color3.fromHSV(aP.tempvalue[1], 1, 1)
                                        aP.holding.hue = true
                                    elseif o:MouseOverDrawing(aP.content[13]) then
                                        local by =
                                            math.clamp(
                                            e:GetMouseLocation().X - aP.content[13].Position.X,
                                            0,
                                            aP.content[13].Size.X
                                        ) / aP.content[13].Size.X
                                        aP.brightness[1] = 100 * by
                                        aP.tempvalue[3] = aP.brightness[1] / 100 - aP.brightness[2]
                                        aP.content[34].Position =
                                            Vector2.new(
                                            aP.content[13].Position.X + aP.content[13].Size.X * aP.brightness[1] / 100,
                                            aP.content[13].Position.Y - 1
                                        )
                                        aP.holding.brightness = true
                                    elseif
                                        o:MouseOverPosition(
                                            {
                                                aP.content[8].Position - Vector2.new(aP.content[8].TextBounds.X / 2, 0),
                                                aP.content[8].Position + Vector2.new(aP.content[8].TextBounds.X / 2, 13)
                                            }
                                        )
                                     then
                                        aP:Set(aP.tempvalue)
                                        aP.tempvalue = aP.value
                                        aP.content[28].Color = Color3.fromHSV(unpack(aP.value))
                                    end
                                    aP.content[23].Color = Color3.fromHSV(unpack(aP.tempvalue))
                                end
                            end
                        end
                    )
                    o:Connect(
                        e.InputChanged,
                        function(a8)
                            if a8.UserInputType == Enum.UserInputType.MouseMovement and #aP.content > 0 then
                                if aP.holding.color then
                                    local br =
                                        math.clamp(
                                        e:GetMouseLocation().X - aP.content[10].Position.X,
                                        0,
                                        aP.content[10].Position.X
                                    ) / aP.content[10].Size.X
                                    local bs =
                                        math.clamp(
                                        e:GetMouseLocation().Y - aP.content[10].Position.Y,
                                        0,
                                        aP.content[10].Position.Y
                                    ) / aP.content[10].Size.Y
                                    local bt = br
                                    local b = aP.brightness[1] / 100 - bs
                                    aP.brightness[2] = bs
                                    aP.tempvalue = {aP.tempvalue[1], bt, b}
                                    local bu = Vector2.new(aP.content[10].Position.X, aP.content[10].Position.Y)
                                    local bv =
                                        Vector2.new(
                                        aP.content[10].Position.X + aP.content[10].Size.X - 5,
                                        aP.content[10].Position.Y + aP.content[10].Size.Y - 5
                                    )
                                    local bw = e:GetMouseLocation()
                                    if bw.X > bv.X then
                                        bw = Vector2.new(bv.X, bw.Y)
                                    end
                                    if bw.Y > bv.Y then
                                        bw = Vector2.new(bw.X, bv.Y)
                                    end
                                    if bw.X < bu.X then
                                        bw = Vector2.new(bu.X, bw.Y)
                                    end
                                    if bw.Y < bu.Y then
                                        bw = Vector2.new(bw.X, bu.Y)
                                    end
                                    aP.content[32].Position = bw
                                elseif aP.holding.hue then
                                    local bx =
                                        math.clamp(
                                        e:GetMouseLocation().Y - aP.content[16].Position.Y,
                                        0,
                                        aP.content[16].Size.Y
                                    ) / aP.content[16].Size.Y
                                    aP.tempvalue = {bx, aP.tempvalue[2], aP.tempvalue[3]}
                                    aP.content[33].Position =
                                        Vector2.new(
                                        aP.content[16].Position.X - 1,
                                        aP.content[16].Position.Y + aP.tempvalue[1] * aP.content[16].Size.Y
                                    )
                                    aP.content[9].Color = Color3.fromHSV(aP.tempvalue[1], 1, 1)
                                elseif aP.holding.brightness then
                                    local by =
                                        math.clamp(
                                        e:GetMouseLocation().X - aP.content[13].Position.X,
                                        0,
                                        aP.content[13].Size.X
                                    ) / aP.content[13].Size.X
                                    local bs =
                                        math.clamp(
                                        aP.content[31].Position.Y - aP.content[10].Position.Y,
                                        0,
                                        aP.content[10].Position.Y
                                    ) / aP.content[10].Size.Y
                                    aP.brightness[1] = 100 * by
                                    aP.tempvalue[3] = aP.brightness[1] / 100 - aP.brightness[2]
                                    aP.content[34].Position =
                                        Vector2.new(
                                        aP.content[13].Position.X + aP.content[13].Size.X * aP.brightness[1] / 100,
                                        aP.content[13].Position.Y - 1
                                    )
                                end
                                aP.content[23].Color = Color3.fromHSV(unpack(aP.tempvalue))
                            end
                        end
                    )
                    o:Connect(
                        e.InputEnded,
                        function(a8)
                            if a8.UserInputType == Enum.UserInputType.MouseButton1 and #aP.content > 0 then
                                for n, b in pairs(aP.holding) do
                                    aP.holding[n] = false
                                end
                            end
                        end
                    )
                    av.colorpicker = aP
                    k.pointers[au] = aP
                    ak.instances = o:Combine(ak.instances, {colorpicker_title, aQ, aR, aS, aT})
                    return aP
                end
                av:Set(aj)
                o:Connect(
                    e.InputBegan,
                    function(a8)
                        local bz = {
                            Vector2.new(al.Position.X, aw.Position.Y - 3),
                            Vector2.new(al.Position.X + al.Size.X, aw.Position.Y + 10)
                        }
                        if av.keybind.name ~= nil or av.colorpicker.name ~= nil then
                            bz = {
                                Vector2.new(al.Position.X, aw.Position.Y - 3),
                                Vector2.new(al.Position.X + al.Size.X - 50, aw.Position.Y + 10)
                            }
                        end
                        if
                            a8.UserInputType == Enum.UserInputType.MouseButton1 and o:MouseOverPosition(bz) and
                                not a3:MouseOverContent() and
                                not a3.fading and
                                aa.open
                         then
                            av:Set(not av.state)
                        end
                    end
                )
                ak.offset = ak.offset + 17
                aa.sectionOffsets[ai] = aa.sectionOffsets[ai] + 19
                ak:Update()
                k.pointers[au] = av
                ak.instances = o:Combine(ak.instances, {aw, ax, ay, az, aA})
                return av
            end
            function ak:Button(_)
                _ = _ or {}
                local a0 = _.name or _.Name or "button"
                local as = _.callback or _.Callback or function()
                    end
                local bA = {name = a0, pressed = false}
                local bB =
                    o:Draw(
                    "Square",
                    Vector2.new(8, 25 + ak.offset),
                    {Color = Color3.fromRGB(50, 50, 50), Size = Vector2.new(210, 18), Parent = al}
                )
                local bC =
                    o:Draw(
                    "Square",
                    Vector2.new(-1, -1),
                    {Color = Color3.fromRGB(0, 0, 0), Size = bB.Size + Vector2.new(2, 2), Filled = false, Parent = bB}
                )
                local bD =
                    o:Draw(
                    "Square",
                    Vector2.new(-2, -2),
                    {
                        Color = Color3.fromRGB(30, 30, 30),
                        Size = bB.Size + Vector2.new(4, 4),
                        Filled = false,
                        Parent = bB
                    }
                )
                local bE = o:Draw("Image", Vector2.new(), {Size = bB.Size, Transparency = 0.8, Parent = bB})
                local bF =
                    o:Draw(
                    "Text",
                    Vector2.new(105, 1),
                    {
                        Color = Color3.fromRGB(255, 255, 255),
                        Outline = true,
                        Size = 13,
                        Font = 2,
                        Text = a0,
                        Center = true,
                        Parent = bB
                    }
                )
                o:Image(bE, "https://i.imgur.com/5hmlrjX.png")
                o:Connect(
                    e.InputBegan,
                    function(a8)
                        if
                            a8.UserInputType == Enum.UserInputType.MouseButton1 and
                                o:MouseOverPosition(
                                    {
                                        Vector2.new(al.Position.X, bB.Position.Y - 2),
                                        Vector2.new(al.Position.X + al.Size.X, bB.Position.Y + 20)
                                    }
                                ) and
                                not a3:MouseOverContent() and
                                not a3.fading and
                                aa.open
                         then
                            bA.pressed = true
                            bB.Color = Color3.fromRGB(40, 40, 40)
                            as()
                        end
                    end
                )
                o:Connect(
                    e.InputEnded,
                    function(a8)
                        if a8.UserInputType == Enum.UserInputType.MouseButton1 and bA.pressed then
                            bA.pressed = false
                            bB.Color = Color3.fromRGB(50, 50, 50)
                        end
                    end
                )
                ak.offset = ak.offset + 23
                aa.sectionOffsets[ai] = aa.sectionOffsets[ai] + 25
                ak:Update()
                ak.instances = o:Combine(ak.instances, {bB, bC, bD, bE, bF})
            end
            function ak:SubButtons(_)
                _ = _ or {}
                local bG =
                    _.buttons or _.Buttons or
                    {
                        {
                            "button 1",
                            function()
                            end
                        },
                        {
                            "button 2",
                            function()
                            end
                        }
                    }
                local bH = {{}, {}}
                for n = 1, 2 do
                    local bB =
                        o:Draw(
                        "Square",
                        Vector2.new(8 + 110 * (n - 1), 25 + ak.offset),
                        {Color = Color3.fromRGB(50, 50, 50), Size = Vector2.new(100, 18), Parent = al}
                    )
                    local bC =
                        o:Draw(
                        "Square",
                        Vector2.new(-1, -1),
                        {
                            Color = Color3.fromRGB(0, 0, 0),
                            Size = bB.Size + Vector2.new(2, 2),
                            Filled = false,
                            Parent = bB
                        }
                    )
                    local bD =
                        o:Draw(
                        "Square",
                        Vector2.new(-2, -2),
                        {
                            Color = Color3.fromRGB(30, 30, 30),
                            Size = bB.Size + Vector2.new(4, 4),
                            Filled = false,
                            Parent = bB
                        }
                    )
                    local bE = o:Draw("Image", Vector2.new(), {Size = bB.Size, Transparency = 0.8, Parent = bB})
                    local bF =
                        o:Draw(
                        "Text",
                        Vector2.new(50, 1),
                        {
                            Color = Color3.fromRGB(255, 255, 255),
                            Outline = true,
                            Size = 13,
                            Font = 2,
                            Text = bG[n][1],
                            Center = true,
                            Parent = bB
                        }
                    )
                    o:Image(bE, "https://i.imgur.com/5hmlrjX.png")
                    bH[n] = {bB, bC, bD, bE, bF}
                    ak.instances = o:Combine(ak.instances, bH[n])
                end
                o:Connect(
                    e.InputBegan,
                    function(a8)
                        for n = 1, 2 do
                            if
                                a8.UserInputType == Enum.UserInputType.MouseButton1 and o:MouseOverDrawing(bH[n][1]) and
                                    not a3:MouseOverContent() and
                                    not a3.fading and
                                    aa.open
                             then
                                bH[n][1].Color = Color3.fromRGB(30, 30, 30)
                                bG[n][2]()
                            end
                        end
                    end
                )
                o:Connect(
                    e.InputEnded,
                    function(a8)
                        for n = 1, 2 do
                            bH[n][1].Color = Color3.fromRGB(50, 50, 50)
                        end
                    end
                )
                ak.offset = ak.offset + 23
                aa.sectionOffsets[ai] = aa.sectionOffsets[ai] + 25
                ak:Update()
            end
            function ak:Slider(_)
                _ = _ or {}
                local a0 = _.name or _.Name or "slider"
                local bI = _.minimum or _.Minimum or _.min or _.Min or -25
                local bJ = _.maximum or _.Maximum or _.max or _.Max or 25
                local aj = _.default or _.Default or _.def or _.Def or bI
                local bK = 1 / (_.decimals or _.Decimals or 1)
                local bL = _.ending or _.Ending or _.suffix or _.Suffix or _.suf or _.Suf or ""
                local as = _.callback or _.Callback or function()
                    end
                local at = _.flag or _.Flag or ""
                local au = _.pointer or _.Pointer or aa.name .. "_" .. ak.name .. "_" .. a0
                local bM = {name = a0, value = def, sliding = false}
                local bN =
                    o:Draw(
                    "Text",
                    Vector2.new(8, 25 + ak.offset),
                    {Color = Color3.fromRGB(255, 255, 255), Outline = true, Size = 13, Font = 2, Text = a0, Parent = al}
                )
                local bO =
                    o:Draw(
                    "Square",
                    Vector2.new(0, 16),
                    {Color = Color3.fromRGB(50, 50, 50), Size = Vector2.new(210, 10), Parent = bN}
                )
                local bP = o:Draw("Square", Vector2.new(), {Color = a1, Size = Vector2.new(0, bO.Size.Y), Parent = bO})
                table.insert(k.accents, bP)
                local bQ =
                    o:Draw(
                    "Square",
                    Vector2.new(-1, -1),
                    {Color = Color3.fromRGB(0, 0, 0), Size = bO.Size + Vector2.new(2, 2), Filled = false, Parent = bO}
                )
                local bR =
                    o:Draw(
                    "Square",
                    Vector2.new(-2, -2),
                    {
                        Color = Color3.fromRGB(30, 30, 30),
                        Size = bO.Size + Vector2.new(4, 4),
                        Filled = false,
                        Parent = bO
                    }
                )
                local bS = o:Draw("Image", Vector2.new(), {Size = bO.Size, Transparency = 0.8, Parent = bO})
                local bT =
                    o:Draw(
                    "Text",
                    Vector2.new(bO.Size.X / 2, -2),
                    {
                        Color = Color3.fromRGB(255, 255, 255),
                        Outline = true,
                        Size = 13,
                        Font = 2,
                        Text = tostring(aj) .. bL,
                        Center = true,
                        Parent = bO
                    }
                )
                o:Image(bS, "https://i.imgur.com/5hmlrjX.png")
                function bM:Set(w)
                    bM.value = math.clamp(math.round(w * bK) / bK, bI, bJ)
                    local by = 1 - (bJ - bM.value) / (bJ - bI)
                    bT.Text = tostring(w) .. bL
                    bP.Size = Vector2.new(by * bO.Size.X, bO.Size.Y)
                    if at ~= "" then
                        k.flags[at] = bM.value
                    end
                    as(bM.value)
                end
                function bM:Get()
                    return bM.value
                end
                bM:Set(aj)
                o:Connect(
                    e.InputBegan,
                    function(a8)
                        if
                            a8.UserInputType == Enum.UserInputType.MouseButton1 and
                                o:MouseOverPosition(
                                    {
                                        Vector2.new(al.Position.X, bN.Position.Y),
                                        Vector2.new(al.Position.X + al.Size.X, bN.Position.Y + 18 + bO.Size.Y)
                                    }
                                ) and
                                not a3:MouseOverContent() and
                                not a3.fading and
                                aa.open
                         then
                            bM.holding = true
                            local by = math.clamp(e:GetMouseLocation().X - bP.Position.X, 0, bO.Size.X) / bO.Size.X
                            local w = math.floor((bI + (bJ - bI) * by) * bK) / bK
                            w = math.clamp(w, bI, bJ)
                            bM:Set(w)
                        end
                    end
                )
                o:Connect(
                    e.InputChanged,
                    function(a8)
                        if a8.UserInputType == Enum.UserInputType.MouseMovement and bM.holding then
                            local by = math.clamp(e:GetMouseLocation().X - bP.Position.X, 0, bO.Size.X) / bO.Size.X
                            local w = math.floor((bI + (bJ - bI) * by) * bK) / bK
                            w = math.clamp(w, bI, bJ)
                            bM:Set(w)
                        end
                    end
                )
                o:Connect(
                    e.InputEnded,
                    function(a8)
                        if a8.UserInputType == Enum.UserInputType.MouseButton1 and bM.holding then
                            bM.holding = false
                        end
                    end
                )
                ak.offset = ak.offset + 32
                aa.sectionOffsets[ai] = aa.sectionOffsets[ai] + 34
                ak:Update()
                k.pointers[au] = bM
                ak.instances = o:Combine(ak.instances, {bO, bP, bQ, bR, bS, bN, bT})
                return bM
            end
            function ak:Dropdown(_)
                _ = _ or {}
                local a0 = _.name or _.Name or "dropdown"
                local bU = _.options or _.Options or {"1", "2"}
                local bV = _.multi or _.Multi or false
                local aj = _.default or _.Default or _.def or _.Def or (bV == false and bU[1] or bV == true and {bU[1]})
                local at = _.flag or _.Flag or ""
                local au = _.pointer or _.Pointer or aa.name .. "_" .. ak.name .. "_" .. a0
                local as = _.callback or _.Callback or function()
                    end
                local bW = {name = a0, options = bU, value = aj, multi = bV, open = false, search = "", content = {}}
                if at ~= "" then
                    k.flags[at] = bW.value
                end
                function bW:ReadValue(bX)
                    if not bV then
                        if o:GetTextSize(bW.value, 2, 13).X >= 196 then
                            return "..."
                        else
                            return bW.value
                        end
                    else
                        local bY = ""
                        for n, b in pairs(bW.value) do
                            if n < #bW.value then
                                bY = bY .. tostring(b) .. ", "
                            else
                                bY = bY .. tostring(b)
                            end
                        end
                        if o:GetTextSize(bY, 2, 13).X >= 196 then
                            return "..."
                        else
                            return bY
                        end
                    end
                end
                local bZ =
                    o:Draw(
                    "Text",
                    Vector2.new(8, 25 + ak.offset),
                    {Color = Color3.fromRGB(255, 255, 255), Outline = true, Size = 13, Font = 2, Text = a0, Parent = al}
                )
                local b_ =
                    o:Draw(
                    "Square",
                    Vector2.new(0, 16),
                    {Color = Color3.fromRGB(50, 50, 50), Size = Vector2.new(210, 18), Parent = bZ}
                )
                local c0 =
                    o:Draw(
                    "Square",
                    Vector2.new(-1, -1),
                    {Color = Color3.fromRGB(0, 0, 0), Size = b_.Size + Vector2.new(2, 2), Filled = false, Parent = b_}
                )
                local c1 =
                    o:Draw(
                    "Square",
                    Vector2.new(-2, -2),
                    {
                        Color = Color3.fromRGB(30, 30, 30),
                        Size = b_.Size + Vector2.new(4, 4),
                        Filled = false,
                        Parent = b_
                    }
                )
                local c2 = o:Draw("Image", Vector2.new(), {Size = b_.Size, Transparency = 0.8, Parent = b_})
                local c3 =
                    o:Draw(
                    "Text",
                    Vector2.new(5, 1),
                    {
                        Color = Color3.fromRGB(255, 255, 255),
                        Outline = true,
                        Size = 13,
                        Font = 2,
                        Text = bW:ReadValue(),
                        Parent = b_
                    }
                )
                local c4 =
                    o:Draw(
                    "Text",
                    Vector2.new(b_.Size.X - 12, 1),
                    {
                        Color = Color3.fromRGB(255, 255, 255),
                        Outline = true,
                        Size = 13,
                        Font = 2,
                        Text = "+",
                        Parent = b_
                    }
                )
                o:Image(c2, "https://i.imgur.com/5hmlrjX.png")
                function bW:Update()
                    if #bW.content > 0 then
                        for n, b in pairs({select(4, unpack(bW.content))}) do
                            b.Color =
                                bV == false and b.Text == bW.value and a1 or
                                bV == true and table.find(bW.value, b.Text) and a1 or
                                Color3.fromRGB(255, 255, 255)
                        end
                    end
                end
                function bW:Set(w)
                    bW.value = table.find(bW.options, w) and w or bU[1]
                    c3.Text = bW:ReadValue()
                    bW:Update()
                    if at ~= "" then
                        k.flags[at] = bW.value
                    end
                    as(bW.value)
                end
                function bW:Get()
                    return bW.value
                end
                function bW:Refresh(bU)
                    if #bW.content > 0 then
                        a3:CloseContent()
                    end
                    bW.options = bU
                    bW:Set(bV == false and bW.options[1] or bV == true and {bW.options[1]})
                end
                o:Connect(
                    e.InputBegan,
                    function(a8)
                        if
                            a8.UserInputType == Enum.UserInputType.MouseButton1 and not a3:MouseOverContent() and
                                not a3.fading and
                                aa.open
                         then
                            if
                                #bW.content == 0 and
                                    o:MouseOverPosition(
                                        {
                                            Vector2.new(al.Position.X, bZ.Position.Y),
                                            Vector2.new(al.Position.X + al.Size.X, bZ.Position.Y + 20 + b_.Size.Y)
                                        }
                                    )
                             then
                                a3:CloseContent()
                                bW.search = ""
                                local c5 =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(1, 20),
                                    {
                                        Color = Color3.fromRGB(45, 45, 45),
                                        Size = Vector2.new(b_.Size.X - 2, #bW.options * 15),
                                        Parent = b_
                                    }
                                )
                                local c6 =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-1, -1),
                                    {
                                        Color = Color3.fromRGB(30, 30, 30),
                                        Size = c5.Size + Vector2.new(2, 2),
                                        Filled = false,
                                        Parent = c5
                                    }
                                )
                                local c7 =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-2, -2),
                                    {
                                        Color = Color3.fromRGB(0, 0, 0),
                                        Size = c5.Size + Vector2.new(4, 4),
                                        Filled = false,
                                        Parent = c5
                                    }
                                )
                                bW.content = {c5, c6, c7}
                                for n, b in pairs(bW.options) do
                                    local R =
                                        o:Draw(
                                        "Text",
                                        Vector2.new(4, 15 * (n - 1)),
                                        {
                                            Color = bV == false and b == bW.value and a1 or
                                                bV == true and table.find(bW.value, b) and a1 or
                                                Color3.fromRGB(255, 255, 255),
                                            Outline = true,
                                            Size = 13,
                                            Font = 2,
                                            Text = tostring(b),
                                            Parent = c5
                                        }
                                    )
                                    table.insert(bW.content, R)
                                end
                                a3.content.dropdown = bW.content
                                c4.Text = "-"
                            elseif #bW.content > 0 then
                                a3:CloseContent()
                                bW.content = {}
                                c4.Text = "+"
                            end
                        elseif
                            a8.UserInputType == Enum.UserInputType.MouseButton1 and #bW.content > 0 and not a3.fading and
                                aa.open
                         then
                            for n = 1, #bW.options do
                                if
                                    o:MouseOverPosition(
                                        {
                                            Vector2.new(bW.content[1].Position.X, bW.content[3 + n].Position.Y),
                                            Vector2.new(
                                                bW.content[1].Position.X + bW.content[1].Size.X,
                                                bW.content[3 + n].Position.Y + 15
                                            )
                                        }
                                    )
                                 then
                                    if not bW.multi then
                                        bW:Set(bW.options[n])
                                    else
                                        if table.find(bW.value, bW.options[n]) then
                                            bW:Set(o:RemoveItem(bW.value, bW.options[n]))
                                        else
                                            table.insert(bW.value, bW.options[n])
                                            bW:Set(bW.value)
                                        end
                                    end
                                end
                            end
                        elseif
                            a8.UserInputType == Enum.UserInputType.Keyboard and #bW.content > 0 and not a3.fading and
                                aa.open
                         then
                            local v = a8.KeyCode
                            if v.Name ~= "Backspace" then
                                bW.search = bW.search .. e:GetStringForKeyCode(v):lower()
                            else
                                bW.search = bW.search:sub(1, -2)
                            end
                            if bW.search ~= "" then
                                for n, b in pairs({select(4, unpack(bW.content))}) do
                                    if b.Color ~= a1 and b.Text:lower():find(bW.search) then
                                        b.Color = Color3.fromRGB(255, 255, 255)
                                    elseif b.Color ~= a1 and not b.Text:lower():find(bW.search) then
                                        b.Color = Color3.fromRGB(155, 155, 155)
                                    end
                                end
                            else
                                for n, b in pairs({select(4, unpack(bW.content))}) do
                                    if b.Color ~= a1 then
                                        b.Color = Color3.fromRGB(255, 255, 255)
                                    end
                                end
                            end
                        end
                    end
                )
                ak.offset = ak.offset + 40
                aa.sectionOffsets[ai] = aa.sectionOffsets[ai] + 42
                ak:Update()
                k.pointers[au] = bW
                ak.instances = o:Combine(ak.instances, {b_, c0, c1, c2, bZ, c3, c4})
                return bW
            end
            function ak:Textbox(_)
                _ = _ or {}
                local a0 = _.name or _.Name or "textbox"
                local aj = _.default or _.Default or _.def or _.Def or ""
                local at = _.flag or _.Flag or ""
                local au = _.pointer or _.Pointer or aa.name .. "_" .. ak.name .. "_" .. a0
                local as = _.callback or _.Callback or function()
                    end
                local c8 = {name = a0, typing = false, hideHolder = false, value = ""}
                local c9 =
                    o:Draw(
                    "Square",
                    Vector2.new(8, 25 + ak.offset),
                    {Color = Color3.fromRGB(50, 50, 50), Size = Vector2.new(210, 18), Parent = al}
                )
                local ca =
                    o:Draw(
                    "Square",
                    Vector2.new(-1, -1),
                    {Color = Color3.fromRGB(0, 0, 0), Size = c9.Size + Vector2.new(2, 2), Filled = false, Parent = c9}
                )
                local cb =
                    o:Draw(
                    "Square",
                    Vector2.new(-2, -2),
                    {
                        Color = Color3.fromRGB(30, 30, 30),
                        Size = c9.Size + Vector2.new(4, 4),
                        Filled = false,
                        Parent = c9
                    }
                )
                local cc = o:Draw("Image", Vector2.new(), {Size = c9.Size, Transparency = 0.8, Parent = c9})
                local cd =
                    o:Draw(
                    "Text",
                    Vector2.new(4, 1),
                    {Color = Color3.fromRGB(255, 255, 255), Outline = true, Size = 13, Font = 2, Text = a0, Parent = c9}
                )
                o:Image(cc, "https://i.imgur.com/5hmlrjX.png")
                function c8:Set(w)
                    c8.value = w
                    cd.Text = c8.typing == false and a0 or c8.value
                    if at ~= "" then
                        k.flags[at] = c8.value
                    end
                    as(c8.value)
                end
                function c8:Get()
                    return c8.value
                end
                o:Connect(
                    e.InputBegan,
                    function(a8)
                        if not c8.typing then
                            if
                                a8.UserInputType == Enum.UserInputType.MouseButton1 and
                                    o:MouseOverPosition(
                                        {
                                            Vector2.new(al.Position.X, c9.Position.Y - 2),
                                            Vector2.new(al.Position.X + al.Size.X, c9.Position.Y + 20)
                                        }
                                    ) and
                                    not a3:MouseOverContent() and
                                    not a3.fading and
                                    aa.open
                             then
                                c8.typing = true
                                if c8.hideHolder == false then
                                    c8.hideHolder = true
                                    cd.Text = c8.value
                                end
                            end
                        else
                            if
                                a8.UserInputType == Enum.UserInputType.MouseButton1 and not a3:MouseOverContent() and
                                    not a3.fading and
                                    aa.open
                             then
                                c8.typing = false
                                c8.hideHolder = false
                                cd.Text = a0
                            elseif a8.UserInputType == Enum.UserInputType.Keyboard then
                                local v = a8.KeyCode
                                if v.Name ~= "Return" then
                                    if v.Name ~= "Backspace" then
                                        if e:GetStringForKeyCode(v) ~= "" then
                                            c8.value = c8.value .. e:GetStringForKeyCode(v):lower()
                                            local ce = 1
                                            spawn(
                                                function()
                                                    task.wait(0.5)
                                                    while e:IsKeyDown(v.Name) do
                                                        if not c8.typing then
                                                            break
                                                        end
                                                        task.wait(.2 / ce)
                                                        c8.value = c8.value .. e:GetStringForKeyCode(v):lower()
                                                        ce = ce + 1
                                                        c8:Set(c8.value)
                                                    end
                                                end
                                            )
                                        end
                                    else
                                        c8.value = c8.value:sub(1, -2)
                                        local ce = 1
                                        spawn(
                                            function()
                                                task.wait(0.5)
                                                while e:IsKeyDown(v.Name) do
                                                    if not c8.typing then
                                                        break
                                                    end
                                                    task.wait(.2 / ce)
                                                    c8.value = c8.value:sub(1, -2)
                                                    ce = ce + 1
                                                    c8:Set(c8.value)
                                                end
                                            end
                                        )
                                    end
                                else
                                    c8.typing = false
                                    c8.hideHolder = false
                                    cd.Text = a0
                                end
                                if c8.hideHolder == true then
                                    cd.Text = c8.value
                                    c8:Set(c8.value)
                                end
                            end
                        end
                    end
                )
                if at ~= "" then
                    k.flags[at] = ""
                end
                ak.offset = ak.offset + 22
                aa.sectionOffsets[ai] = aa.sectionOffsets[ai] + 24
                ak:Update()
                ak.instances = o:Combine(ak.instances, {c9, ca, cb, cc, cd})
            end
            function ak:Label(_)
                _ = _ or {}
                local a0 = _.name or _.Name or _.text or _.Text or "label"
                local cf = _.mid or _.Mid or _.middle or _.Middle or false
                local as = _.callback or _.Callback or function()
                    end
                local cg = {name = a0, middle = cf}
                local ch =
                    o:Draw(
                    "Text",
                    Vector2.new(cf == false and 9 or al.Size.X / 2, 25 + ak.offset),
                    {
                        Color = Color3.fromRGB(255, 255, 255),
                        Outline = true,
                        Size = 13,
                        Font = 2,
                        Text = a0,
                        Center = cf,
                        Parent = al
                    }
                )
                ak.offset = ak.offset + 15
                aa.sectionOffsets[ai] = aa.sectionOffsets[ai] + 17
                ak:Update()
                ak.instances = o:Combine(ak.instances, {ch})
            end
            function ak:Colorpicker(_)
                _ = _ or {}
                local a0 = _.name or _.Name or "colorpicker"
                local aj = _.default or _.Default or _.def or _.Def or Color3.fromRGB(255, 0, 0)
                local at = _.flag or _.Flag or ""
                local au = _.pointer or _.Pointer or aa.name .. "_" .. ak.name .. "_" .. a0
                local as = _.callback or _.Callback or function()
                    end
                local aP = {
                    name = a0,
                    value = {aj:ToHSV()},
                    tempvalue = {},
                    brightness = {100, 0},
                    holding = {hue = false, brightness = false, color = false},
                    content = {}
                }
                if at ~= "" then
                    k.flags[at] = aj
                end
                local colorpicker_title =
                    o:Draw(
                    "Text",
                    Vector2.new(8, 25 + ak.offset),
                    {Color = Color3.fromRGB(255, 255, 255), Outline = true, Size = 13, Font = 2, Text = a0, Parent = al}
                )
                local aQ =
                    o:Draw(
                    "Square",
                    Vector2.new(al.Size.X - 45, 2),
                    {Color = aj, Size = Vector2.new(24, 10), Parent = colorpicker_title}
                )
                local aR =
                    o:Draw(
                    "Square",
                    Vector2.new(),
                    {Color = Color3.fromRGB(0, 0, 0), Size = aQ.Size, Transparency = 0.3, Filled = false, Parent = aQ}
                )
                local aS =
                    o:Draw(
                    "Square",
                    Vector2.new(1, 1),
                    {
                        Color = Color3.fromRGB(0, 0, 0),
                        Size = aQ.Size - Vector2.new(2, 2),
                        Transparency = 0.3,
                        Filled = false,
                        Parent = aQ
                    }
                )
                local aT =
                    o:Draw(
                    "Square",
                    Vector2.new(-1, -1),
                    {Color = Color3.fromRGB(0, 0, 0), Size = aQ.Size + Vector2.new(2, 2), Filled = false, Parent = aQ}
                )
                function aP:Set(w)
                    if typeof(w) == "Color3" then
                        w = {w:ToHSV()}
                    end
                    aP.value = w
                    aQ.Color = Color3.fromHSV(unpack(aP.value))
                    if at ~= "" then
                        k.flags[at] = Color3.fromHSV(unpack(aP.value))
                    end
                    as(Color3.fromHSV(unpack(aP.value)))
                end
                function aP:Get()
                    return Color3.fromHSV(unpack(aP.value))
                end
                o:Connect(
                    e.InputBegan,
                    function(a8)
                        if a8.UserInputType == Enum.UserInputType.MouseButton1 then
                            if
                                #aP.content == 0 and
                                    o:MouseOverPosition(
                                        {
                                            Vector2.new(al.Position.X, colorpicker_title.Position.Y - 3),
                                            Vector2.new(al.Position.X + al.Size.X, colorpicker_title.Position.Y + 10)
                                        }
                                    ) and
                                    not a3:MouseOverContent() and
                                    not a3.fading and
                                    aa.open
                             then
                                aP.tempvalue = aP.value
                                aP.brightness[2] = 0
                                local aU =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(12, 5),
                                    {Color = Color3.fromRGB(35, 35, 35), Size = Vector2.new(276, 207), Parent = aQ}
                                )
                                local aV =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-1, -1),
                                    {
                                        Color = Color3.fromRGB(20, 20, 20),
                                        Size = aU.Size + Vector2.new(2, 2),
                                        Filled = false,
                                        Parent = aU
                                    }
                                )
                                local aW =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-2, -2),
                                    {
                                        Color = Color3.fromRGB(0, 0, 0),
                                        Size = aU.Size + Vector2.new(4, 4),
                                        Filled = false,
                                        Parent = aU
                                    }
                                )
                                local aX =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(0, 1),
                                    {Color = a1, Size = Vector2.new(aU.Size.X, 1), Parent = aU}
                                )
                                table.insert(k.accents, aX)
                                local aY =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(0, 2),
                                    {Color = a2, Size = Vector2.new(aU.Size.X, 1), Parent = aU}
                                )
                                table.insert(k.accents, aY)
                                local aZ =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(0, 3),
                                    {Color = Color3.fromRGB(20, 20, 20), Size = Vector2.new(aU.Size.X, 1), Parent = aU}
                                )
                                local a_ =
                                    o:Draw(
                                    "Text",
                                    Vector2.new(5, 6),
                                    {
                                        Color = Color3.fromRGB(255, 255, 255),
                                        Outline = true,
                                        Size = 13,
                                        Font = 2,
                                        Text = aP.name,
                                        Parent = aU
                                    }
                                )
                                local b0 =
                                    o:Draw(
                                    "Text",
                                    Vector2.new(232, 187),
                                    {
                                        Color = Color3.fromRGB(255, 255, 255),
                                        Outline = true,
                                        Size = 13,
                                        Font = 2,
                                        Text = "[ Apply ]",
                                        Center = true,
                                        Parent = aU
                                    }
                                )
                                local b1 =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(10, 23),
                                    {
                                        Color = Color3.fromHSV(aP.value[1], 1, 1),
                                        Size = Vector2.new(156, 156),
                                        Parent = aU
                                    }
                                )
                                local b2 = o:Draw("Image", Vector2.new(), {Size = b1.Size, Parent = b1})
                                local b3 =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-1, -1),
                                    {
                                        Color = Color3.fromRGB(0, 0, 0),
                                        Size = b1.Size + Vector2.new(2, 2),
                                        Filled = false,
                                        Parent = b1
                                    }
                                )
                                local b4 =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-2, -2),
                                    {
                                        Color = Color3.fromRGB(30, 30, 30),
                                        Size = b1.Size + Vector2.new(4, 4),
                                        Filled = false,
                                        Parent = b1
                                    }
                                )
                                local b5 =
                                    o:Draw("Image", Vector2.new(10, 189), {Size = Vector2.new(156, 10), Parent = aU})
                                local b6 =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-1, -1),
                                    {
                                        Color = Color3.fromRGB(0, 0, 0),
                                        Size = b5.Size + Vector2.new(2, 2),
                                        Filled = false,
                                        Parent = b5
                                    }
                                )
                                local b7 =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-2, -2),
                                    {
                                        Color = Color3.fromRGB(30, 30, 30),
                                        Size = b5.Size + Vector2.new(4, 4),
                                        Filled = false,
                                        Parent = b5
                                    }
                                )
                                local b8 =
                                    o:Draw("Image", Vector2.new(176, 23), {Size = Vector2.new(10, 156), Parent = aU})
                                local b9 =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-1, -1),
                                    {
                                        Color = Color3.fromRGB(0, 0, 0),
                                        Size = b8.Size + Vector2.new(2, 2),
                                        Filled = false,
                                        Parent = b8
                                    }
                                )
                                local ba =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-2, -2),
                                    {
                                        Color = Color3.fromRGB(30, 30, 30),
                                        Size = b8.Size + Vector2.new(4, 4),
                                        Filled = false,
                                        Parent = b8
                                    }
                                )
                                local bb =
                                    o:Draw(
                                    "Text",
                                    Vector2.new(196, 23),
                                    {
                                        Color = Color3.fromRGB(255, 255, 255),
                                        Outline = true,
                                        Size = 13,
                                        Font = 2,
                                        Text = "New color",
                                        Parent = aU
                                    }
                                )
                                local bc =
                                    o:Draw("Image", Vector2.new(197, 37), {Size = Vector2.new(71, 36), Parent = aU})
                                local bd =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-1, -1),
                                    {
                                        Color = Color3.fromRGB(0, 0, 0),
                                        Size = bc.Size + Vector2.new(2, 2),
                                        Filled = false,
                                        Parent = bc
                                    }
                                )
                                local be =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-2, -2),
                                    {
                                        Color = Color3.fromRGB(30, 30, 30),
                                        Size = bc.Size + Vector2.new(4, 4),
                                        Filled = false,
                                        Parent = bc
                                    }
                                )
                                local bf =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(2, 2),
                                    {
                                        Color = Color3.fromHSV(unpack(aP.value)),
                                        Size = bc.Size - Vector2.new(4, 4),
                                        Transparency = 0.4,
                                        Parent = bc
                                    }
                                )
                                local bg =
                                    o:Draw(
                                    "Text",
                                    Vector2.new(196, 76),
                                    {
                                        Color = Color3.fromRGB(255, 255, 255),
                                        Outline = true,
                                        Size = 13,
                                        Font = 2,
                                        Text = "Old color",
                                        Parent = aU
                                    }
                                )
                                local bh =
                                    o:Draw("Image", Vector2.new(197, 91), {Size = Vector2.new(71, 36), Parent = aU})
                                local bi =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-1, -1),
                                    {
                                        Color = Color3.fromRGB(0, 0, 0),
                                        Size = bh.Size + Vector2.new(2, 2),
                                        Filled = false,
                                        Parent = bh
                                    }
                                )
                                local bj =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-2, -2),
                                    {
                                        Color = Color3.fromRGB(30, 30, 30),
                                        Size = bh.Size + Vector2.new(4, 4),
                                        Filled = false,
                                        Parent = bh
                                    }
                                )
                                local bk =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(2, 2),
                                    {
                                        Color = Color3.fromHSV(unpack(aP.value)),
                                        Size = bh.Size - Vector2.new(4, 4),
                                        Transparency = 0.4,
                                        Parent = bh
                                    }
                                )
                                local bl =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(b2.Size.X - 5, 0),
                                    {
                                        Color = Color3.fromRGB(255, 255, 255),
                                        Size = Vector2.new(5, 5),
                                        Filled = false,
                                        Parent = b2
                                    }
                                )
                                local bm =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-1, -1),
                                    {
                                        Color = Color3.fromRGB(0, 0, 0),
                                        Size = bl.Size + Vector2.new(2, 2),
                                        Filled = false,
                                        Parent = bl
                                    }
                                )
                                local bn =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-1, 0),
                                    {
                                        Color = Color3.fromRGB(255, 255, 255),
                                        Size = Vector2.new(12, 3),
                                        Filled = false,
                                        Parent = b8
                                    }
                                )
                                bn.Position =
                                    Vector2.new(b8.Position.X - 1, b8.Position.Y + aP.tempvalue[1] * b8.Size.Y)
                                local bo =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-1, -1),
                                    {
                                        Color = Color3.fromRGB(0, 0, 0),
                                        Size = bn.Size + Vector2.new(2, 2),
                                        Filled = false,
                                        Parent = bn
                                    }
                                )
                                local bp =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(b5.Size.X, -1),
                                    {
                                        Color = Color3.fromRGB(255, 255, 255),
                                        Size = Vector2.new(3, 12),
                                        Filled = false,
                                        Parent = b5
                                    }
                                )
                                bp.Position =
                                    Vector2.new(b5.Position.X + b5.Size.X * aP.brightness[1] / 100, b5.Position.Y - 1)
                                local bq =
                                    o:Draw(
                                    "Square",
                                    Vector2.new(-1, -1),
                                    {
                                        Color = Color3.fromRGB(0, 0, 0),
                                        Size = bp.Size + Vector2.new(2, 2),
                                        Filled = false,
                                        Parent = bp
                                    }
                                )
                                o:Image(b2, "https://i.imgur.com/wpDRqVH.png")
                                o:Image(b5, "https://tr.rbxcdn.com/cf80cdea88fd9bbdb4037ab352260726/420/420/Image/Png")
                                o:Image(b8, "https://i.imgur.com/iEOsHFv.png")
                                o:Image(
                                    bc,
                                    "https://images-ext-1.discordapp.net/external/Nc7u8ZAc9yYabSDkX2zn48MdXjh0BL3KswXDknMm97w/https/media.discordapp.net/attachments/942749250897477662/980791504954093588/unknown.png"
                                )
                                o:Image(
                                    bh,
                                    "https://images-ext-1.discordapp.net/external/Nc7u8ZAc9yYabSDkX2zn48MdXjh0BL3KswXDknMm97w/https/media.discordapp.net/attachments/942749250897477662/980791504954093588/unknown.png"
                                )
                                aP.content = {
                                    aU,
                                    aV,
                                    aW,
                                    aX,
                                    aY,
                                    aZ,
                                    a_,
                                    b0,
                                    b1,
                                    b2,
                                    b3,
                                    b4,
                                    b5,
                                    b6,
                                    b7,
                                    b8,
                                    b9,
                                    ba,
                                    bb,
                                    bc,
                                    bd,
                                    be,
                                    bf,
                                    bg,
                                    bh,
                                    bi,
                                    bj,
                                    bk,
                                    bo,
                                    bq,
                                    bm,
                                    bl,
                                    bn,
                                    bp
                                }
                                a3.content.colorpicker = aP.content
                            elseif #aP.content > 0 and not a3:MouseOverContent() and not a3.fading and aa.open then
                                a3:CloseContent()
                                aP.content = {}
                                for n, b in pairs(aP.holding) do
                                    aP.holding[n] = false
                                end
                            elseif #aP.content > 0 and a3:MouseOverContent() and not a3.fadign and aa.open then
                                if o:MouseOverDrawing(aP.content[10]) then
                                    local br =
                                        math.clamp(
                                        e:GetMouseLocation().X - aP.content[10].Position.X,
                                        0,
                                        aP.content[10].Position.X
                                    ) / aP.content[10].Size.X
                                    local bs =
                                        math.clamp(
                                        e:GetMouseLocation().Y - aP.content[10].Position.Y,
                                        0,
                                        aP.content[10].Position.Y
                                    ) / aP.content[10].Size.Y
                                    local bt = br
                                    local b = aP.brightness[1] / 100 - bs
                                    aP.brightness[2] = bs
                                    aP.tempvalue = {aP.tempvalue[1], bt, b}
                                    local bu = Vector2.new(aP.content[10].Position.X, aP.content[10].Position.Y)
                                    local bv =
                                        Vector2.new(
                                        aP.content[10].Position.X + aP.content[10].Size.X - 5,
                                        aP.content[10].Position.Y + aP.content[10].Size.Y - 5
                                    )
                                    local bw = e:GetMouseLocation()
                                    if bw.X > bv.X then
                                        bw = Vector2.new(bv.X, bw.Y)
                                    end
                                    if bw.Y > bv.Y then
                                        bw = Vector2.new(bw.X, bv.Y)
                                    end
                                    if bw.X < bu.X then
                                        bw = Vector2.new(bu.X, bw.Y)
                                    end
                                    if bw.Y < bu.Y then
                                        bw = Vector2.new(bw.X, bu.Y)
                                    end
                                    aP.content[32].Position = bw
                                    aP.holding.color = true
                                elseif o:MouseOverDrawing(aP.content[16]) then
                                    local bx =
                                        math.clamp(
                                        e:GetMouseLocation().Y - aP.content[16].Position.Y,
                                        0,
                                        aP.content[16].Size.Y
                                    ) / aP.content[16].Size.Y
                                    aP.tempvalue = {bx, aP.tempvalue[2], aP.tempvalue[3]}
                                    aP.content[33].Position =
                                        Vector2.new(
                                        aP.content[16].Position.X - 1,
                                        aP.content[16].Position.Y + aP.tempvalue[1] * aP.content[16].Size.Y
                                    )
                                    aP.content[9].Color = Color3.fromHSV(aP.tempvalue[1], 1, 1)
                                    aP.holding.hue = true
                                elseif o:MouseOverDrawing(aP.content[13]) then
                                    local by =
                                        math.clamp(
                                        e:GetMouseLocation().X - aP.content[13].Position.X,
                                        0,
                                        aP.content[13].Size.X
                                    ) / aP.content[13].Size.X
                                    aP.brightness[1] = 100 * by
                                    aP.tempvalue[3] = aP.brightness[1] / 100 - aP.brightness[2]
                                    aP.content[34].Position =
                                        Vector2.new(
                                        aP.content[13].Position.X + aP.content[13].Size.X * aP.brightness[1] / 100,
                                        aP.content[13].Position.Y - 1
                                    )
                                    aP.holding.brightness = true
                                elseif
                                    o:MouseOverPosition(
                                        {
                                            aP.content[8].Position - Vector2.new(aP.content[8].TextBounds.X / 2, 0),
                                            aP.content[8].Position + Vector2.new(aP.content[8].TextBounds.X / 2, 13)
                                        }
                                    )
                                 then
                                    aP:Set(aP.tempvalue)
                                    aP.tempvalue = aP.value
                                    aP.content[28].Color = Color3.fromHSV(unpack(aP.value))
                                end
                                aP.content[23].Color = Color3.fromHSV(unpack(aP.tempvalue))
                            end
                        end
                    end
                )
                o:Connect(
                    e.InputChanged,
                    function(a8)
                        if a8.UserInputType == Enum.UserInputType.MouseMovement and #aP.content > 0 then
                            if aP.holding.color then
                                local br =
                                    math.clamp(
                                    e:GetMouseLocation().X - aP.content[10].Position.X,
                                    0,
                                    aP.content[10].Position.X
                                ) / aP.content[10].Size.X
                                local bs =
                                    math.clamp(
                                    e:GetMouseLocation().Y - aP.content[10].Position.Y,
                                    0,
                                    aP.content[10].Position.Y
                                ) / aP.content[10].Size.Y
                                local bt = br
                                local b = aP.brightness[1] / 100 - bs
                                aP.brightness[2] = bs
                                aP.tempvalue = {aP.tempvalue[1], bt, b}
                                local bu = Vector2.new(aP.content[10].Position.X, aP.content[10].Position.Y)
                                local bv =
                                    Vector2.new(
                                    aP.content[10].Position.X + aP.content[10].Size.X - 5,
                                    aP.content[10].Position.Y + aP.content[10].Size.Y - 5
                                )
                                local bw = e:GetMouseLocation()
                                if bw.X > bv.X then
                                    bw = Vector2.new(bv.X, bw.Y)
                                end
                                if bw.Y > bv.Y then
                                    bw = Vector2.new(bw.X, bv.Y)
                                end
                                if bw.X < bu.X then
                                    bw = Vector2.new(bu.X, bw.Y)
                                end
                                if bw.Y < bu.Y then
                                    bw = Vector2.new(bw.X, bu.Y)
                                end
                                aP.content[32].Position = bw
                            elseif aP.holding.hue then
                                local bx =
                                    math.clamp(
                                    e:GetMouseLocation().Y - aP.content[16].Position.Y,
                                    0,
                                    aP.content[16].Size.Y
                                ) / aP.content[16].Size.Y
                                aP.tempvalue = {bx, aP.tempvalue[2], aP.tempvalue[3]}
                                aP.content[33].Position =
                                    Vector2.new(
                                    aP.content[16].Position.X - 1,
                                    aP.content[16].Position.Y + aP.tempvalue[1] * aP.content[16].Size.Y
                                )
                                aP.content[9].Color = Color3.fromHSV(aP.tempvalue[1], 1, 1)
                            elseif aP.holding.brightness then
                                local by =
                                    math.clamp(
                                    e:GetMouseLocation().X - aP.content[13].Position.X,
                                    0,
                                    aP.content[13].Size.X
                                ) / aP.content[13].Size.X
                                local bs =
                                    math.clamp(
                                    aP.content[31].Position.Y - aP.content[10].Position.Y,
                                    0,
                                    aP.content[10].Position.Y
                                ) / aP.content[10].Size.Y
                                aP.brightness[1] = 100 * by
                                aP.tempvalue[3] = aP.brightness[1] / 100 - aP.brightness[2]
                                aP.content[34].Position =
                                    Vector2.new(
                                    aP.content[13].Position.X + aP.content[13].Size.X * aP.brightness[1] / 100,
                                    aP.content[13].Position.Y - 1
                                )
                            end
                            aP.content[23].Color = Color3.fromHSV(unpack(aP.tempvalue))
                        end
                    end
                )
                o:Connect(
                    e.InputEnded,
                    function(a8)
                        if a8.UserInputType == Enum.UserInputType.MouseButton1 and #aP.content > 0 then
                            for n, b in pairs(aP.holding) do
                                aP.holding[n] = false
                            end
                        end
                    end
                )
                ak.offset = ak.offset + 17
                aa.sectionOffsets[ai] = aa.sectionOffsets[ai] + 19
                ak:Update()
                k.pointers[au] = aP
                ak.instances = o:Combine(ak.instances, {colorpicker_title, aQ, aR, aS, aT})
                return aP
            end
            return ak
        end
        function aa:Update()
            function getUnderIndex(n, ai)
                local ci = 0
                for ag, b in pairs(aa.sections) do
                    if ag < n and b.side == ai then
                        ci = ci + b.instances[1].Size.Y + 9
                    end
                end
                return ci
            end
            for n, b in pairs(aa.sections) do
                b.instances[1].SetOffset(
                    Vector2.new(b.side == "left" and 9 or b.side == "right" and 245, 9 + getUnderIndex(n, b.side))
                )
            end
        end
        return aa
    end
    function a3:Watermark()
        local cj = {name = "BeanBot", version = "0.2.2", instances = {}, values = {}}
        local ck =
            o:Draw(
            "Square",
            Vector2.new(),
            {Color = Color3.fromRGB(50, 50, 50), Size = Vector2.new(223, 20), Position = Vector2.new(60, 10)},
            true
        )
        local cl =
            o:Draw(
            "Square",
            Vector2.new(-1, -1),
            {Color = Color3.fromRGB(20, 20, 20), Size = ck.Size + Vector2.new(2, 2), Filled = false, Parent = ck},
            true
        )
        local cm =
            o:Draw(
            "Square",
            Vector2.new(-2, -2),
            {Color = Color3.fromRGB(0, 0, 0), Size = ck.Size + Vector2.new(4, 4), Filled = false, Parent = ck},
            true
        )
        local cn = o:Draw("Square", Vector2.new(), {Color = a1, Size = Vector2.new(ck.Size.X, 1), Parent = ck}, true)
        table.insert(k.accents, cn)
        local co =
            o:Draw("Square", Vector2.new(0, 1), {Color = a2, Size = Vector2.new(ck.Size.X, 1), Parent = ck}, true)
        table.insert(k.accents, co)
        local cp =
            o:Draw(
            "Square",
            Vector2.new(0, 2),
            {Color = Color3.fromRGB(20, 20, 20), Size = Vector2.new(ck.Size.X, 1), Parent = ck},
            true
        )
        local cq =
            o:Draw(
            "Image",
            Vector2.new(0, 3),
            {Size = ck.Size - Vector2.new(0, 3), Transparency = 0.65, Parent = ck},
            true
        )
        local cr = o:Draw("Image", Vector2.new(4, 2), {Size = Vector2.new(18, 18), Parent = ck}, true)
        local cs =
            o:Draw(
            "Text",
            Vector2.new(28, 4),
            {
                Color = Color3.fromRGB(255, 255, 255),
                Outline = true,
                Size = 13,
                Font = 2,
                Text = cj.name .. " | 0 fps | 0ms",
                Parent = ck
            },
            true
        )
        o:Image(cq, "https://i.imgur.com/5hmlrjX.png")
        o:Image(cr, "https://tr.rbxcdn.com/74ac16e97027fc4dd6cec71eb2932dba/420/420/Image/Png")
        function cj:Property(n, b)
            if n == "Visible" then
                for ag, ah in pairs(cj.instances) do
                    ah.Visible = b
                end
            elseif n == "Icon" then
                o:Image(cr, b)
            elseif n == "Name" then
                cj.name = b
            end
        end
        o:Connect(
            f.RenderStepped,
            function(E)
                cj.values[1] = math.floor(1 / E)
                cj.values[2] = math.floor(game.Stats.PerformanceStats.Ping:GetValue())
            end
        )
        spawn(
            function()
                while task.wait(0.1) do
                    if rawget(cs, "__OBJECT_EXIST") then
                        cs.Text =
                            cj.name ..
                            " | " ..
                                cj.version ..
                                    " | " .. tostring(cj.values[1]) .. " fps | " .. tostring(cj.values[2]) .. "ms"
                        ck.Size = Vector2.new(32 + cs.TextBounds.X, 20)
                        cl.Size = ck.Size + Vector2.new(2, 2)
                        cm.Size = ck.Size + Vector2.new(4, 4)
                        cq.Size = ck.Size
                        cn.Size = Vector2.new(ck.Size.X, 1)
                        co.Size = Vector2.new(ck.Size.X, 1)
                        cp.Size = Vector2.new(ck.Size.X, 1)
                    else
                        break
                    end
                end
            end
        )
        cj.instances = {ck, cl, cm, cn, co, cp, cq, cr, cs}
        cj:Property("Visible", false)
        a3.watermark = cj
    end
    function a3:Keybinds()
        local ct = {instances = {}, keybinds = {}}
        local cu =
            o:Draw(
            "Square",
            Vector2.new(),
            {
                Color = Color3.fromRGB(50, 50, 50),
                Size = Vector2.new(62, 18),
                Position = Vector2.new(10, math.floor(o:ScreenSize().Y / 2))
            },
            true
        )
        local cv =
            o:Draw(
            "Square",
            Vector2.new(-1, -1),
            {Color = Color3.fromRGB(20, 20, 20), Size = cu.Size + Vector2.new(2, 2), Filled = false, Parent = cu},
            true
        )
        local cw =
            o:Draw(
            "Square",
            Vector2.new(-2, -2),
            {Color = Color3.fromRGB(0, 0, 0), Size = cu.Size + Vector2.new(4, 4), Filled = false, Parent = cu},
            true
        )
        local cx = o:Draw("Square", Vector2.new(), {Color = a1, Size = Vector2.new(cu.Size.X, 1), Parent = cu}, true)
        table.insert(k.accents, cx)
        local cy =
            o:Draw("Square", Vector2.new(0, 1), {Color = a2, Size = Vector2.new(cu.Size.X, 1), Parent = cu}, true)
        table.insert(k.accents, cy)
        local cz =
            o:Draw(
            "Square",
            Vector2.new(0, 2),
            {Color = Color3.fromRGB(20, 20, 20), Size = Vector2.new(cu.Size.X, 1), Parent = cu},
            true
        )
        local cA =
            o:Draw(
            "Image",
            Vector2.new(0, 3),
            {Size = cu.Size - Vector2.new(0, 3), Transparency = 0.8, Parent = cu},
            true
        )
        local cB =
            o:Draw(
            "Text",
            Vector2.new(2, 2),
            {Color = Color3.fromRGB(255, 255, 255), Outline = true, Size = 13, Font = 2, Text = "Keybinds", Parent = cu},
            true
        )
        o:Image(cA, "https://i.imgur.com/5hmlrjX.png")
        function ct:Longest()
            if #ct.keybinds > 0 then
                local cC = o:CopyTable(ct.keybinds)
                table.sort(
                    cC,
                    function(cD, cE)
                        return o:GetTextSize(cD, 2, 13).X > o:GetTextSize(cE, 2, 13).X
                    end
                )
                return o:GetTextSize(cC[1], 2, 13).X
            end
            return 0
        end
        function ct:Redraw()
            for a, b in pairs({select(9, unpack(ct.instances))}) do
                b.Remove()
            end
            ct.instances = {cu, cv, cw, cx, cy, cz, cA, cB}
            if ct:Longest() + 6 > 60 then
                cu.Size = Vector2.new(ct:Longest() + 6, (#ct.keybinds + 1) * 16 + 2)
                cv.Size = cu.Size + Vector2.new(2, 2)
                cw.Size = cu.Size + Vector2.new(4, 4)
                cx.Size = Vector2.new(cu.Size.X, 1)
                cy.Size = Vector2.new(cu.Size.X, 1)
                cz.Size = Vector2.new(cu.Size.X, 1)
                cA.Size = cu.Size
            else
                cu.Size = Vector2.new(60, (#ct.keybinds + 1) * 16 + 2)
                cv.Size = cu.Size + Vector2.new(2, 2)
                cw.Size = cu.Size + Vector2.new(4, 4)
                cx.Size = Vector2.new(cu.Size.X, 1)
                cy.Size = Vector2.new(cu.Size.X, 1)
                cz.Size = Vector2.new(cu.Size.X, 1)
                cA.Size = cu.Size
            end
            for n, b in pairs(ct.keybinds) do
                local cF =
                    o:Draw(
                    "Text",
                    Vector2.new(2, 16 * n + 2),
                    {
                        Color = Color3.fromRGB(255, 255, 255),
                        Outline = true,
                        Size = 13,
                        Font = 2,
                        Text = b,
                        Parent = cu,
                        Visible = cu.Visible
                    },
                    true
                )
                table.insert(ct.instances, cF)
            end
        end
        function ct:Add(a0)
            if not table.find(ct.keybinds, a0) then
                table.insert(ct.keybinds, a0)
                ct:Redraw()
            end
        end
        function ct:Remove(a0)
            if table.find(ct.keybinds, a0) then
                table.remove(ct.keybinds, table.find(ct.keybinds, a0))
                ct:Redraw()
            end
        end
        function ct:Property(n, b)
            if n == "Visible" then
                for a, ah in pairs(ct.instances) do
                    ah.Visible = b
                end
            end
        end
        ct.instances = {cu, cv, cw, cx, cy, cz, cA, cB}
        ct:Property("Visisble", false)
        a3.keybinds = ct
    end
    function a3:ChangeAccent(cG, cH)
        for n, b in pairs(k.accents) do
            if rawget(b, "__OBJECT_EXIST") then
                if cG:lower() == "accent1" and b.Color == a1 or cG:lower() == "accent2" and b.Color == a2 then
                    b.Color = cH
                end
            end
        end
        if cG:lower() == "accent1" then
            a1 = cH
        else
            a2 = cH
        end
    end
    function a3:Rename(w)
        a5.Text = w
    end
    function a3:GetConfig()
        local cI = {}
        for n, b in pairs(k.pointers) do
            cI[n] = b:Get()
        end
        return game:GetService("HttpService"):JSONEncode(cI)
    end
    function a3:LoadConfig(cI)
        for n, b in pairs(game:GetService("HttpService"):JSONDecode(cI)) do
            if k.pointers[n] then
                k.pointers[n]:Set(b)
            end
        end
    end
    function a3:Update()
        for n, b in pairs(a3.tabs) do
            b:Update()
        end
        a3:UpdateTabs()
    end
    function a3:MouseOverContent()
        if a4.Visible then
            if a3.content.dropdown then
                return o:MouseOverDrawing(a3.content.dropdown[1])
            elseif a3.content.colorpicker then
                return o:MouseOverDrawing(a3.content.colorpicker[1])
            elseif a3.content.keybind then
                return o:MouseOverDrawing(a3.content.keybind[1])
            end
        end
        return not a4.Visible
    end
    function a3:CloseContent()
        if a3.content.dropdown then
            for n, b in pairs(a3.content.dropdown) do
                b.Remove()
            end
            a3.content.dropdown = nil
        elseif a3.content.colorpicker then
            for n, b in pairs(a3.content.colorpicker) do
                b.Remove()
            end
            a3.content.colorpicker = nil
        elseif a3.content.keybind then
            for n, b in pairs(a3.content.keybind) do
                b.Remove()
            end
            a3.content.keybind = nil
        end
    end
    function a3:UpdateTabs()
        for a, b in pairs(a3.tabs) do
            if b.open == false then
                b:Hide()
            else
                b:Show()
            end
        end
    end
    function a3:SetTab(a0)
        for a, b in pairs(a3.tabs) do
            if b.name == a0 then
                b.open = true
            else
                b.open = false
            end
        end
        a3:UpdateTabs()
        a3:CloseContent()
    end
    function a3:Load()
        getgenv().window_state = "pre"
        a3:SetTab(a3.tabs[1].name)
        task.wait(0.3)
        getgenv().window_state = "initializing"
        a3:Watermark()
        a3:Keybinds()
        k.loaded = true
        task.wait(0.3)
        getgenv().window_state = "post"
        task.wait(0.5)
        a3:Toggle()
        repeat
            task.wait()
        until a3.fading == false
        getgenv().window_state = "finished"
    end
    function a3:Unload()
        for n, b in pairs(k.connections) do
            b:Disconnect()
        end
        for n, b in pairs(o:Combine(k.drawings, k.hidden)) do
            b[1].Remove()
        end
        j:Remove()
        k.loaded = false
    end
    return a3
end
local cJ = game.Players.LocalPlayer
local cK = nil
local cL = nil
local cM = {}
local cN = {
    ["Default"] = "https://tr.rbxcdn.com/74ac16e97027fc4dd6cec71eb2932dba/420/420/Image/Png",
    ["Azure"] = "https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Microsoft_Azure.svg/1200px-Microsoft_Azure.svg.png"
}
function isAlive(cO)
    local cP = false
    if cO ~= nil and cO.Parent == game.Players and cO.Character ~= nil then
        if
            cO.Character:FindFirstChild("HumanoidRootPart") and cO.Character:FindFirstChild("Humanoid") ~= nil and
                cO.Character.Humanoid.Health > 0 and
                cO.Character:FindFirstChild("Head")
         then
            cP = true
        end
    end
    return cP
end
function isTarget(Z, cQ)
    if isAlive(Z) then
        if not Z.Neutral and not cJ.Neutral then
            if cQ == false then
                return Z.Team ~= cJ.Team
            elseif cQ == true then
                return Z ~= cJ
            end
        else
            return Z ~= cJ
        end
    end
end
function getConfigs()
    local cR = {"-"}
    for n, b in pairs(listfiles("beanbot/Da Hood/configs/")) do
        if tostring(b):sub(-5, -1) == ".bean" then
            table.insert(cR, tostring(b):sub(24, -6))
        end
    end
    return cR
end
function RandomNumberRange(cD)
    return math.random(-cD * 100, cD * 100) / 100
end
function RandomVectorRange(cD, cE, cS)
    return Vector3.new(RandomNumberRange(cD), RandomNumberRange(cE), RandomNumberRange(cS))
end
function GetPlayerNames()
    local cT = {cJ.Name}
    for n, b in pairs(game.Players:GetPlayers()) do
        if b ~= cJ then
            table.insert(cT, b.Name)
        end
    end
    return cT
end
